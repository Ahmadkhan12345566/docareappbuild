(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2ca3b1a4"],{"0227":function(module,exports,__webpack_require__){eval('(function (global, factory) {\n   true ? factory(exports) :\n  undefined;\n}(this, function (exports) { \'use strict\';\n\n  var fp = typeof window !== "undefined" && window.flatpickr !== undefined\n      ? window.flatpickr\n      : {\n          l10ns: {}\n      };\n  var French = {\n      firstDayOfWeek: 1,\n      weekdays: {\n          shorthand: ["dim", "lun", "mar", "mer", "jeu", "ven", "sam"],\n          longhand: [\n              "dimanche",\n              "lundi",\n              "mardi",\n              "mercredi",\n              "jeudi",\n              "vendredi",\n              "samedi",\n          ]\n      },\n      months: {\n          shorthand: [\n              "janv",\n              "févr",\n              "mars",\n              "avr",\n              "mai",\n              "juin",\n              "juil",\n              "août",\n              "sept",\n              "oct",\n              "nov",\n              "déc",\n          ],\n          longhand: [\n              "janvier",\n              "février",\n              "mars",\n              "avril",\n              "mai",\n              "juin",\n              "juillet",\n              "août",\n              "septembre",\n              "octobre",\n              "novembre",\n              "décembre",\n          ]\n      },\n      ordinal: function (nth) {\n          if (nth > 1)\n              return "";\n          return "er";\n      },\n      rangeSeparator: " au ",\n      weekAbbreviation: "Sem",\n      scrollTitle: "Défiler pour augmenter la valeur",\n      toggleTitle: "Cliquer pour basculer",\n      time_24hr: true\n  };\n  fp.l10ns.fr = French;\n  var fr = fp.l10ns;\n\n  exports.French = French;\n  exports.default = fr;\n\n  Object.defineProperty(exports, \'__esModule\', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvbDEwbi9mci5qcz8wMjI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsRUFBRSxLQUE0RDtBQUM5RCxFQUFFLFNBQ2tEO0FBQ3BELENBQUMsMkJBQTJCOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0RBQWdELGNBQWM7O0FBRTlELENBQUMiLCJmaWxlIjoiMDIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5mciA9IHt9KSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZnAgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5mbGF0cGlja3IgIT09IHVuZGVmaW5lZFxuICAgICAgPyB3aW5kb3cuZmxhdHBpY2tyXG4gICAgICA6IHtcbiAgICAgICAgICBsMTBuczoge31cbiAgICAgIH07XG4gIHZhciBGcmVuY2ggPSB7XG4gICAgICBmaXJzdERheU9mV2VlazogMSxcbiAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgc2hvcnRoYW5kOiBbXCJkaW1cIiwgXCJsdW5cIiwgXCJtYXJcIiwgXCJtZXJcIiwgXCJqZXVcIiwgXCJ2ZW5cIiwgXCJzYW1cIl0sXG4gICAgICAgICAgbG9uZ2hhbmQ6IFtcbiAgICAgICAgICAgICAgXCJkaW1hbmNoZVwiLFxuICAgICAgICAgICAgICBcImx1bmRpXCIsXG4gICAgICAgICAgICAgIFwibWFyZGlcIixcbiAgICAgICAgICAgICAgXCJtZXJjcmVkaVwiLFxuICAgICAgICAgICAgICBcImpldWRpXCIsXG4gICAgICAgICAgICAgIFwidmVuZHJlZGlcIixcbiAgICAgICAgICAgICAgXCJzYW1lZGlcIixcbiAgICAgICAgICBdXG4gICAgICB9LFxuICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgc2hvcnRoYW5kOiBbXG4gICAgICAgICAgICAgIFwiamFudlwiLFxuICAgICAgICAgICAgICBcImbDqXZyXCIsXG4gICAgICAgICAgICAgIFwibWFyc1wiLFxuICAgICAgICAgICAgICBcImF2clwiLFxuICAgICAgICAgICAgICBcIm1haVwiLFxuICAgICAgICAgICAgICBcImp1aW5cIixcbiAgICAgICAgICAgICAgXCJqdWlsXCIsXG4gICAgICAgICAgICAgIFwiYW/Du3RcIixcbiAgICAgICAgICAgICAgXCJzZXB0XCIsXG4gICAgICAgICAgICAgIFwib2N0XCIsXG4gICAgICAgICAgICAgIFwibm92XCIsXG4gICAgICAgICAgICAgIFwiZMOpY1wiLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgbG9uZ2hhbmQ6IFtcbiAgICAgICAgICAgICAgXCJqYW52aWVyXCIsXG4gICAgICAgICAgICAgIFwiZsOpdnJpZXJcIixcbiAgICAgICAgICAgICAgXCJtYXJzXCIsXG4gICAgICAgICAgICAgIFwiYXZyaWxcIixcbiAgICAgICAgICAgICAgXCJtYWlcIixcbiAgICAgICAgICAgICAgXCJqdWluXCIsXG4gICAgICAgICAgICAgIFwianVpbGxldFwiLFxuICAgICAgICAgICAgICBcImFvw7t0XCIsXG4gICAgICAgICAgICAgIFwic2VwdGVtYnJlXCIsXG4gICAgICAgICAgICAgIFwib2N0b2JyZVwiLFxuICAgICAgICAgICAgICBcIm5vdmVtYnJlXCIsXG4gICAgICAgICAgICAgIFwiZMOpY2VtYnJlXCIsXG4gICAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudGgpIHtcbiAgICAgICAgICBpZiAobnRoID4gMSlcbiAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgcmV0dXJuIFwiZXJcIjtcbiAgICAgIH0sXG4gICAgICByYW5nZVNlcGFyYXRvcjogXCIgYXUgXCIsXG4gICAgICB3ZWVrQWJicmV2aWF0aW9uOiBcIlNlbVwiLFxuICAgICAgc2Nyb2xsVGl0bGU6IFwiRMOpZmlsZXIgcG91ciBhdWdtZW50ZXIgbGEgdmFsZXVyXCIsXG4gICAgICB0b2dnbGVUaXRsZTogXCJDbGlxdWVyIHBvdXIgYmFzY3VsZXJcIixcbiAgICAgIHRpbWVfMjRocjogdHJ1ZVxuICB9O1xuICBmcC5sMTBucy5mciA9IEZyZW5jaDtcbiAgdmFyIGZyID0gZnAubDEwbnM7XG5cbiAgZXhwb3J0cy5GcmVuY2ggPSBGcmVuY2g7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IGZyO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0227\n')},"0cb2":function(module,exports,__webpack_require__){eval("var uncurryThis = __webpack_require__(\"e330\");\nvar toObject = __webpack_require__(\"7b0b\");\n\nvar floor = Math.floor;\nvar charAt = uncurryThis(''.charAt);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d{1,2}|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d{1,2})/g;\n\n// `GetSubstitution` abstract operation\n// https://tc39.es/ecma262/#sec-getsubstitution\nmodule.exports = function (matched, str, position, captures, namedCaptures, replacement) {\n  var tailPos = position + matched.length;\n  var m = captures.length;\n  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n  if (namedCaptures !== undefined) {\n    namedCaptures = toObject(namedCaptures);\n    symbols = SUBSTITUTION_SYMBOLS;\n  }\n  return replace(replacement, symbols, function (match, ch) {\n    var capture;\n    switch (charAt(ch, 0)) {\n      case '$': return '$';\n      case '&': return matched;\n      case '`': return stringSlice(str, 0, position);\n      case \"'\": return stringSlice(str, tailPos);\n      case '<':\n        capture = namedCaptures[stringSlice(ch, 1, -1)];\n        break;\n      default: // \\d\\d?\n        var n = +ch;\n        if (n === 0) return match;\n        if (n > m) {\n          var f = floor(n / 10);\n          if (f === 0) return match;\n          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);\n          return match;\n        }\n        capture = captures[n - 1];\n    }\n    return capture === undefined ? '' : capture;\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcz8wY2IyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLE1BQW9DO0FBQzlELGVBQWUsbUJBQU8sQ0FBQyxNQUF3Qjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QyxrREFBa0QsSUFBSTs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIwY2IyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBgR2V0U3Vic3RpdHV0aW9uYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICB2YXIgY2FwdHVyZTtcbiAgICBzd2l0Y2ggKGNoYXJBdChjaCwgMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIHRhaWxQb3MpO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW3N0cmluZ1NsaWNlKGNoLCAxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoYXJBdChjaCwgMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaGFyQXQoY2gsIDEpO1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0cb2\n")},"1f76":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_cli_service_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("60d6");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_cli_service_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_cli_service_node_modules_vue_loader_lib_index_js_vue_loader_options_Add_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9hcHAvbW9kdWxlcy9zdXBlcmFkbWluL21vZHVsZXMvc3BlY2lhbGlzdC92aWV3cy9BZGQudnVlP2RkZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBIiwiZmlsZSI6IjFmNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNy1vbmVPZi0xLTAhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNy1vbmVPZi0xLTEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXNlcnZpY2Uvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNy1vbmVPZi0xLTIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xLTAhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXNlcnZpY2Uvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3MmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1f76\n')},"2be5":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmxhdHBpY2tyL2Rpc3QvZmxhdHBpY2tyLm1pbi5jc3M/OTRkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyYmU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2be5\n")},"2ca0":function(module,exports,__webpack_require__){"use strict";eval('\nvar $ = __webpack_require__("23e7");\nvar uncurryThis = __webpack_require__("e330");\nvar getOwnPropertyDescriptor = __webpack_require__("06cf").f;\nvar toLength = __webpack_require__("50c4");\nvar toString = __webpack_require__("577e");\nvar notARegExp = __webpack_require__("5a34");\nvar requireObjectCoercible = __webpack_require__("1d80");\nvar correctIsRegExpLogic = __webpack_require__("ab13");\nvar IS_PURE = __webpack_require__("c430");\n\n// eslint-disable-next-line es/no-string-prototype-startswith -- safe\nvar un$StartsWith = uncurryThis(\'\'.startsWith);\nvar stringSlice = uncurryThis(\'\'.slice);\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic(\'startsWith\');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, \'startsWith\');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.startsWith` method\n// https://tc39.es/ecma262/#sec-string.prototype.startswith\n$({ target: \'String\', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = toString(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = toString(searchString);\n    return un$StartsWith\n      ? un$StartsWith(that, search, index)\n      : stringSlice(that, index, index + search.length) === search;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcz8yY2EwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsUUFBUSxtQkFBTyxDQUFDLE1BQXFCO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLE1BQW9DO0FBQzlELCtCQUErQixtQkFBTyxDQUFDLE1BQWlEO0FBQ3hGLGVBQWUsbUJBQU8sQ0FBQyxNQUF3QjtBQUMvQyxlQUFlLG1CQUFPLENBQUMsTUFBd0I7QUFDL0MsaUJBQWlCLG1CQUFPLENBQUMsTUFBMkI7QUFDcEQsNkJBQTZCLG1CQUFPLENBQUMsTUFBdUM7QUFDNUUsMkJBQTJCLG1CQUFPLENBQUMsTUFBc0M7QUFDekUsY0FBYyxtQkFBTyxDQUFDLE1BQXNCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsR0FBRyx1RkFBdUY7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyY2EwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciB1biRTdGFydHNXaXRoID0gdW5jdXJyeVRoaXMoJycuc3RhcnRzV2l0aCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJFN0YXJ0c1dpdGhcbiAgICAgID8gdW4kU3RhcnRzV2l0aCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2ca0\n')},5319:function(module,exports,__webpack_require__){"use strict";eval("\nvar apply = __webpack_require__(\"2ba4\");\nvar call = __webpack_require__(\"c65b\");\nvar uncurryThis = __webpack_require__(\"e330\");\nvar fixRegExpWellKnownSymbolLogic = __webpack_require__(\"d784\");\nvar fails = __webpack_require__(\"d039\");\nvar anObject = __webpack_require__(\"825a\");\nvar isCallable = __webpack_require__(\"1626\");\nvar toIntegerOrInfinity = __webpack_require__(\"5926\");\nvar toLength = __webpack_require__(\"50c4\");\nvar toString = __webpack_require__(\"577e\");\nvar requireObjectCoercible = __webpack_require__(\"1d80\");\nvar advanceStringIndex = __webpack_require__(\"8aa5\");\nvar getMethod = __webpack_require__(\"dc4a\");\nvar getSubstitution = __webpack_require__(\"0cb2\");\nvar regExpExec = __webpack_require__(\"14c3\");\nvar wellKnownSymbol = __webpack_require__(\"b622\");\n\nvar REPLACE = wellKnownSymbol('replace');\nvar max = Math.max;\nvar min = Math.min;\nvar concat = uncurryThis([].concat);\nvar push = uncurryThis([].push);\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar stringSlice = uncurryThis(''.slice);\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.es/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);\n      return replacer\n        ? call(replacer, searchValue, O, replaceValue)\n        : call(nativeReplace, toString(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace\n    function (string, replaceValue) {\n      var rx = anObject(this);\n      var S = toString(string);\n\n      if (\n        typeof replaceValue == 'string' &&\n        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&\n        stringIndexOf(replaceValue, '$<') === -1\n      ) {\n        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var functionalReplace = isCallable(replaceValue);\n      if (!functionalReplace) replaceValue = toString(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        push(results, result);\n        if (!global) break;\n\n        var matchStr = toString(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = toString(result[0]);\n        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = concat([matched], captures, position, S);\n          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);\n          var replacement = toString(apply(replaceValue, undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + stringSlice(S, nextSourcePosition);\n    }\n  ];\n}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzPzUzMTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixZQUFZLG1CQUFPLENBQUMsTUFBNkI7QUFDakQsV0FBVyxtQkFBTyxDQUFDLE1BQTRCO0FBQy9DLGtCQUFrQixtQkFBTyxDQUFDLE1BQW9DO0FBQzlELG9DQUFvQyxtQkFBTyxDQUFDLE1BQWlEO0FBQzdGLFlBQVksbUJBQU8sQ0FBQyxNQUFvQjtBQUN4QyxlQUFlLG1CQUFPLENBQUMsTUFBd0I7QUFDL0MsaUJBQWlCLG1CQUFPLENBQUMsTUFBMEI7QUFDbkQsMEJBQTBCLG1CQUFPLENBQUMsTUFBcUM7QUFDdkUsZUFBZSxtQkFBTyxDQUFDLE1BQXdCO0FBQy9DLGVBQWUsbUJBQU8sQ0FBQyxNQUF3QjtBQUMvQyw2QkFBNkIsbUJBQU8sQ0FBQyxNQUF1QztBQUM1RSx5QkFBeUIsbUJBQU8sQ0FBQyxNQUFtQztBQUNwRSxnQkFBZ0IsbUJBQU8sQ0FBQyxNQUF5QjtBQUNqRCxzQkFBc0IsbUJBQU8sQ0FBQyxNQUErQjtBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxNQUFtQztBQUM1RCxzQkFBc0IsbUJBQU8sQ0FBQyxNQUFnQzs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsb0JBQW9CO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjUzMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogY2FsbChuYXRpdmVSZXBsYWNlLCB0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVwbGFjZVZhbHVlID09ICdzdHJpbmcnICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCBVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCAnJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICBwdXNoKHJlc3VsdHMsIHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlck9ySW5maW5pdHkocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgcHVzaChjYXB0dXJlcywgbWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gY29uY2F0KFttYXRjaGVkXSwgY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSBwdXNoKHJlcGxhY2VyQXJncywgbmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdG9TdHJpbmcoYXBwbHkocmVwbGFjZVZhbHVlLCB1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcbn0sICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyB8fCAhUkVQTEFDRV9LRUVQU18kMCB8fCBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5319\n")},"60d6":function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9hcHAvbW9kdWxlcy9zdXBlcmFkbWluL21vZHVsZXMvc3BlY2lhbGlzdC92aWV3cy9BZGQudnVlP2VjOGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjBkNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60d6\n")},8758:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"5f77683a-vue-loader-template"}!./node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/@vue/cli-service/node_modules/vue-loader/lib??vue-loader-options!./src/modules/app/modules/superadmin/modules/specialist/views/Add.vue?vue&type=template&id=08c49d7f&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',[_c(\'div\',{staticClass:"ajax-loader"},[_c(\'svg\',{staticStyle:{"position":"fixed","top":"50%","left":"50%","transform":"translate(-50%, -50%)"},attrs:{"width":"135","height":"135","viewBox":"0 0 135 135","xmlns":"http://www.w3.org/2000/svg","fill":"#A7D08E"}},[_c(\'path\',{attrs:{"d":"M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z"}},[_c(\'animateTransform\',{attrs:{"attributeName":"transform","type":"rotate","from":"0 67 67","to":"-360 67 67","dur":"2.5s","repeatCount":"indefinite"}})],1),_c(\'path\',{attrs:{"d":"M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z"}},[_c(\'animateTransform\',{attrs:{"attributeName":"transform","type":"rotate","from":"0 67 67","to":"360 67 67","dur":"8s","repeatCount":"indefinite"}})],1)])]),_c(\'div\',{staticClass:"layout-px-spacing"},[_c(\'div\',{staticClass:"row layout-top-spacing"}),_c(\'div\',{staticClass:"widget-content widget-content-area custom-border-radius"},[_c(\'form\',{staticClass:"contact",attrs:{"id":"register_specialist_fm"}},[_c(\'div\',{staticClass:"info"},[_vm._m(0),_c(\'div\',{staticClass:"row"},[(Object.keys(_vm.errors).length)?_c(\'div\',{staticClass:"col-md-12"},[_c(\'div\',{staticClass:"alert alert-danger"},[_vm._v(" Whoops, something went wrong! "),_c(\'ul\',_vm._l((Object.keys(_vm.errors)),function(error){return _c(\'li\',{key:error,staticStyle:{"list-style":"unset"}},[_vm._v(_vm._s(_vm.errors[error][0]))])}),0)])]):_vm._e(),_c(\'div\',{staticClass:"col-md-12"},[_c(\'h3\',{staticClass:"specialist-info-text"},[_vm._v("Information spécialisée")]),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',{attrs:{"for":"first_name"}},[_vm._v("Prénom du spécialiste")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.user.firstname),expression:"form.user.firstname"}],staticClass:"form-control mb-4 inp-person-first-name",attrs:{"type":"text","id":"first_name","name":"first_name","placeholder":"Prénom du spécialiste"},domProps:{"value":(_vm.form.user.firstname)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.user, "firstname", $event.target.value)}}})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',{attrs:{"for":"last_name"}},[_vm._v("Nom de famille du spécialiste")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.user.lastname),expression:"form.user.lastname"}],staticClass:"inp-person-last-name form-control mb-4",attrs:{"type":"text","id":"last_name","name":"last_name","placeholder":"Nom de famille du spécialiste"},domProps:{"value":(_vm.form.user.lastname)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.user, "lastname", $event.target.value)}}})])])]),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',{attrs:{"for":"specialitycategory_id_fk"}},[_vm._v("Spécialiste")]),_c(\'select\',{staticClass:"form-control specialist_category tagging",attrs:{"id":"specialitycategory_id_fk","name":"specialitycategory_id_fk","multiple":"true"}},_vm._l((_vm.specialities),function(speciality){return _c(\'option\',{domProps:{"value":speciality.speciality_id}},[_vm._v(_vm._s(speciality.name))])}),0),_c(\'br\')])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',{attrs:{"for":"email"}},[_vm._v("Adresse électronique")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.user.email),expression:"form.user.email"}],staticClass:"form-control mb-4 inp-email",attrs:{"type":"email","id":"email","name":"email","placeholder":"Adresse électronique"},domProps:{"value":(_vm.form.user.email)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.user, "email", $event.target.value)}}}),_c(\'span\',{attrs:{"id":"email_error"}})])])]),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',{attrs:{"for":"mobile_number"}},[_vm._v("Numéro de portable")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.user.phone_number),expression:"form.user.phone_number"}],staticClass:"form-control mb-4 inp-phone",attrs:{"type":"text","id":"mobile_number","name":"mobile_number","maxlength":"10","placeholder":"Numéro de portable","data-rule-minlength":"10","data-msg-minlength":"Numéro de portable La longueur est de 10"},domProps:{"value":(_vm.form.user.phone_number)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.user, "phone_number", $event.target.value)}}}),_c(\'span\',{attrs:{"id":"mobile_error"}})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',{attrs:{"for":"practice_start_date"}},[_vm._v("Date de début")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.practice_start_date),expression:"form.practice_start_date"}],staticClass:"form-control flatpickr flatpickr-input active",attrs:{"type":"text","id":"practice_start_date1","name":"practice_start_date","placeholder":"Date de début"},domProps:{"value":(_vm.form.practice_start_date)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form, "practice_start_date", $event.target.value)}}})])])]),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Adresse spécialiste – Ligne 1 (exemple : 33 rue censier)*")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.addresses[0].street_address),expression:"form.addresses[0].street_address"}],staticClass:"form-control inp-company-street-address1",attrs:{"type":"text","placeholder":"Adresse spécialiste – Ligne 1 (exemple : 33 rue censier)*","name":"owner_address_line1","data-rule-required":"true","data-msg-required":"Adresse spécialiste – Ligne 1 (exemple : 33 rue censier)* champ est obligatoire."},domProps:{"value":(_vm.form.addresses[0].street_address)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.addresses[0], "street_address", $event.target.value)}}})])])]),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Adresse spécialiste – Ligne 2 (exemple: Résidence, maison, etc..)*")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.addresses[1].street_address),expression:"form.addresses[1].street_address"}],staticClass:"form-control add_2",attrs:{"type":"text","placeholder":"Adresse spécialiste – Ligne 2 (exemple: Résidence, maison, etc..)*","name":"owner_address_line2","data-rule-required":"true","data-msg-required":"Adresse spécialiste – Ligne 2 (exemple: Résidence, maison, etc..)* champ est obligatoire."},domProps:{"value":(_vm.form.addresses[1].street_address)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.addresses[1], "street_address", $event.target.value)}}})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'label\',[_vm._v("Pays")]),_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.user.profile.country_id),expression:"form.user.profile.country_id"}],staticClass:"form-control init-select2 select-field",staticStyle:{"padding-left":"2px"},attrs:{"name":"country","id":"sel_country","data-rule-required":"true","data-msg-required":"Pays champ est obligatoire."},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.form.user.profile, "country_id", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"selected":"","disabled":"","value":""}},[_vm._v("Pays")]),_vm._l((_vm.countries),function(country){return _c(\'option\',{key:country.id,domProps:{"value":country.id}},[_vm._v(_vm._s(country.name.en))])})],2)])]),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Ville")]),_c(\'select\',{staticClass:"form-control select-field inp-company-city",staticStyle:{"padding-left":"2px"},attrs:{"name":"city","id":"sel_city","data-rule-required":"true","data-msg-required":"<?= $this->lang->line(\'city\') champ est obligatoire."}},[_c(\'option\',{attrs:{"selected":"","disabled":"","value":""}},[_vm._v("Ville")]),_vm._l((_vm.cities),function(city){return _c(\'option\',{key:city.id,domProps:{"value":city.id}},[_vm._v(_vm._s(city.name.en))])})],2)])])]),_c(\'div\',{staticClass:"row"},[_vm._m(1),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Date de naissance")]),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.form.user.profile.date_of_birth),expression:"form.user.profile.date_of_birth"}],staticClass:"form-control flatpickr flatpickr-input active date_of_birth",attrs:{"type":"text","id":"date_of_birth","name":"date_of_birth","placeholder":"Date de naissance","data-rule-required":"true","data-msg-required":"Date champ est obligatoire."},domProps:{"value":(_vm.form.user.profile.date_of_birth)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.form.user.profile, "date_of_birth", $event.target.value)}}})])])]),_vm._m(2),_vm._m(3),_vm._m(4),_vm._m(5),_c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12"},[_c(\'center\',[_c(\'span\',{staticClass:"bank_validations error"})])],1)]),_c(\'div\',{staticClass:"row bottom-button-row"},[_c(\'div\',{staticClass:"col-md-12 text-center pt-5"},[_c(\'input\',{attrs:{"type":"hidden","name":"stripe_bank_account","id":"stripe_bank_account"}}),_c(\'input\',{attrs:{"type":"hidden","name":"token-account","id":"token-account"}}),_c(\'button\',{staticClass:"btn btn-primary custom-submit-btn add-btn",attrs:{"type":"submit"}},[_vm._v("Soumettre")]),_c(\'button\',{staticClass:"btn btn-outline-success btn-rounded reset-btn",attrs:{"type":"reset"}},[_vm._v("Réinitialiser")]),_c(\'router-link\',{staticClass:"btn btn-outline-dark btn-rounded back-btn-width",attrs:{"to":"/superadmin/specialist"}},[_vm._v("Retour")])],1)])])])])])])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-12 col-lg-12 col-sm-12 col-xs-12"},[_c(\'div\',{staticClass:"upload pr-md-4"},[_c(\'input\',{staticClass:"dropify",attrs:{"type":"file","id":"specialist_picture","name":"specialist_picture","data-max-file-size":"2M"}}),_c(\'p\',{staticClass:"mt-2 text-center text-capitalize"},[_c(\'i\',{staticClass:"flaticon-cloud-upload mr-1 "}),_vm._v("Photo du spécialiste")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Code postal")]),_c(\'input\',{staticClass:"form-control inp-person-zip",attrs:{"type":"text","placeholder":"Code postal","name":"postal_code","data-rule-required":"true","data-msg-required":"postal code champ est obligatoire."}})])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Numéro de pièce d\'identité*")]),_c(\'input\',{staticClass:"form-control",attrs:{"type":"text","id":"id_number","name":"id_number","placeholder":"Numéro de pièce d\'identité*"}})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Nom du titulaire du compte")]),_c(\'input\',{staticClass:"form-control",attrs:{"type":"text","id":"account_holder_name","name":"account_holder_name","placeholder":"Nom du titulaire du compte","data-rule-required":"true","data-msg-required":"Le champ du nom du titulaire du compte est obligatoire"}})])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("IBAN – sans espace*")]),_c(\'input\',{staticClass:"form-control IBAN",attrs:{"type":"text","id":"","placeholder":"IBAN – sans espace*","name":"IBAN","data-rule-required":"true","data-msg-required":"IBAN – sans espace* champ est obligatoire."}})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Recto pièce d\'identité (format jpg)*")]),_c(\'div\',{attrs:{"id":"fileUpload"}},[_c(\'p\',{staticClass:"choose_btn"},[_vm._v("Importer")])]),_c(\'input\',{attrs:{"type":"file","id":"doc_front","name":"doc_front","data-rule-required":"true","data-msg-required":"Document front champ est obligatoire."}}),_c(\'span\',{staticClass:"doc_front"}),_c(\'p\',{staticClass:"error_file"},[_vm._v("Veuillez sélectionner un document")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Verso pièce d\'identité (format jpg)*")]),_c(\'div\',{attrs:{"id":"fileUpload_2"}},[_c(\'p\',{staticClass:"choose_btn"},[_vm._v("Importer")])]),_c(\'input\',{attrs:{"type":"file","id":"doc_back","name":"doc_back","data-rule-required":"true","data-msg-required":"Document back champ est obligatoire."}}),_c(\'p\',{staticClass:"error_file_1"},[_vm._v("Veuillez sélectionner un document")]),_c(\'span\',{staticClass:"doc_back"})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'label\',[_vm._v("Recto document complémentaire (à défaut remettre la pièce d\'identité recto)*")]),_c(\'div\',{attrs:{"id":"fileUpload_3"}},[_c(\'p\',{staticClass:"choose_btn"},[_vm._v("Importer")])]),_c(\'input\',{attrs:{"type":"file","id":"additional_doc_front","name":"additional_doc_front","data-rule-required":"true","data-msg-required":"Additional Document back champ est obligatoire."}}),_c(\'p\',{staticClass:"error_file_2"},[_vm._v("Veuillez sélectionner un document")]),_c(\'span\',{staticClass:"additional_doc_front"})])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"row"},[_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"},[_c(\'div\',{staticClass:"quform-input"},[_c(\'label\',[_vm._v("Verso document complémentaire (à défaut remettre la pièce d\'identité verso)*")]),_c(\'div\',{attrs:{"id":"fileUpload_4"}},[_c(\'p\',{staticClass:"choose_btn"},[_vm._v("Importer")])]),_c(\'input\',{attrs:{"type":"file","id":"additional_doc_back","name":"additional_doc_back","data-rule-required":"true","data-msg-required":"Additional Document back champ est obligatoire."}}),_c(\'p\',{staticClass:"error_file_3"},[_vm._v("Veuillez sélectionner un document")]),_c(\'span\',{staticClass:"additional_doc_back"})])]),_c(\'div\',{staticClass:"col-md-6"},[_c(\'div\',{staticClass:"form-group"})])])])}]\n\n\n// CONCATENATED MODULE: ./src/modules/app/modules/superadmin/modules/specialist/views/Add.vue?vue&type=template&id=08c49d7f&\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__("5530");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __webpack_require__("ac1f");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__("5319");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js\nvar es_string_starts_with = __webpack_require__("2ca0");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.test.js\nvar es_regexp_test = __webpack_require__("00b4");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js\nvar es_string_match = __webpack_require__("466d");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __webpack_require__("4de4");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__("d3b7");\n\n// EXTERNAL MODULE: ./src/modules/http/api/requestFactory.js\nvar requestFactory = __webpack_require__("8c0b");\n\n// EXTERNAL MODULE: ./node_modules/select2/dist/js/select2.js\nvar select2 = __webpack_require__("0e33");\n\n// EXTERNAL MODULE: ./node_modules/dropify/dist/js/dropify.js\nvar dropify = __webpack_require__("a9fb");\n\n// EXTERNAL MODULE: ./node_modules/jquery-validation/dist/jquery.validate.js\nvar jquery_validate = __webpack_require__("ac82");\n\n// EXTERNAL MODULE: ./node_modules/dropify/dist/css/dropify.css\nvar css_dropify = __webpack_require__("fe7f");\n\n// EXTERNAL MODULE: ./node_modules/flatpickr/dist/flatpickr.js\nvar flatpickr = __webpack_require__("cf06");\n\n// EXTERNAL MODULE: ./node_modules/flatpickr/dist/l10n/fr.js\nvar fr = __webpack_require__("0227");\n\n// EXTERNAL MODULE: ./node_modules/flatpickr/dist/flatpickr.min.css\nvar flatpickr_min = __webpack_require__("2be5");\n\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__("2f62");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/@vue/cli-service/node_modules/vue-loader/lib??vue-loader-options!./src/modules/app/modules/superadmin/modules/specialist/views/Add.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var Addvue_type_script_lang_js_ = ({\n  name: \'add-specialist\',\n  methods: Object(objectSpread2["a" /* default */])({\n    validateMobile: function validateMobile(value) {\n      var mobile = ""; //First remove all spaces:\n\n      value = value.replace(/\\s/g, \'\');\n\n      if (value.startsWith("0")) {\n        var temp = value.substring(1, value.length);\n        mobile = "+33" + temp; //Mobile number:\n\n        return mobile;\n        console.log(\'mobile\' + mobile);\n      } else if (value.startsWith("+")) {\n        var temp = value.substring(3, value.length);\n        mobile = "+33" + temp; //Mobile number:\n\n        console.log(\'mobile:\' + mobile);\n        return mobile;\n      } else {\n        mobile = value; //Mobile number:\n\n        console.log(mobile);\n        return mobile;\n      }\n    }\n  }, Object(vuex_esm["b" /* mapActions */])(\'app/superAdminSpecialistStore\', [\'setCountries\', \'setSpecialities\', \'post\'])),\n  data: function data() {\n    return {\n      errors: {},\n      form: {\n        practice_start_date: \'\',\n        speciality_id: [],\n        addresses: [{\n          street_address: \'\'\n        }, {\n          street_address: \'\'\n        }],\n        postal_code: \'\',\n        user: {\n          email: \'\',\n          firstname: \'\',\n          lastname: \'\',\n          phone_number: \'\',\n          profile: {\n            profile_image: \'\'\n          }\n        }\n      },\n      cities: []\n    };\n  },\n  computed: Object(objectSpread2["a" /* default */])({}, Object(vuex_esm["c" /* mapGetters */])(\'app/superAdminSpecialistStore\', [\'countries\', \'specialities\'])),\n  mounted: function mounted() {\n    var _this = this;\n\n    var that = this;\n    $(".tagging").select2({\n      tags: true\n    }); //$(\'.init-select2\').select2();\n\n    Object(requestFactory["a" /* default */])().get(\'/api/v1/superadmin/specialities\').then(function (data) {\n      that.setSpecialities(data);\n    });\n    Object(requestFactory["a" /* default */])().get(\'/api/v1/superadmin/countries\').then(function (response) {\n      return _this.setCountries(response.data);\n    });\n    $(\'.dropify\').dropify({\n      messages: {\n        \'default\': \'Click to Upload or Drag n Drop\',\n        \'remove\': \'<i class="fa fa-times"></i>\',\n        \'replace\': \'Upload or Drag n Drop\'\n      }\n    });\n    $(\'#fileUpload_4\').on(\'click\', function () {\n      $(\'#additional_doc_back\').click();\n    });\n    $(\'#additional_doc_back\').on(\'change\', function () {\n      if ($(\'#additional_doc_back\').val() != \'\') {\n        $(\'#fileUpload_4\').html($(\'#additional_doc_back\').val().replace(/.*(\\/|\\\\)/, \'\'));\n      } else {\n        $(\'#fileUpload_4\').html($(\'Importer\').val());\n      }\n    });\n    $(\'.add-btn\').on(\'click\', function () {\n      $("#register_specialist_fm").valid();\n    });\n    $(\'#fileUpload\').on(\'click\', function () {\n      $(\'#doc_front\').click();\n    });\n    $(\'#doc_front\').on(\'change\', function () {\n      if ($(\'#doc_front\').val() != \'\') {\n        $(\'#fileUpload\').html($(\'#doc_front\').val().replace(/.*(\\/|\\\\)/, \'\'));\n      } else {\n        $(\'#fileUpload\').html($(\'Importer\').val());\n      }\n    });\n    $(\'#fileUpload_2\').on(\'click\', function () {\n      $(\'#doc_back\').click();\n    });\n    $(\'#doc_back\').on(\'change\', function () {\n      if ($(\'#doc_back\').val() != \'\') {\n        $(\'#fileUpload_2\').html($(\'#doc_back\').val().replace(/.*(\\/|\\\\)/, \'\'));\n      } else {\n        $(\'#fileUpload_2\').html($(\'Importer\').val());\n      }\n    });\n    $(\'#fileUpload_3\').on(\'click\', function () {\n      $(\'#additional_doc_front\').click();\n    });\n    $(\'#additional_doc_front\').on(\'change\', function () {\n      if ($(\'#additional_doc_front\').val() != \'\') {\n        $(\'#fileUpload_3\').html($(\'#additional_doc_front\').val().replace(/.*(\\/|\\\\)/, \'\'));\n      } else {\n        $(\'#fileUpload_3\').html($(\'Importer\').val());\n      }\n    });\n    document.getElementById(\'date_of_birth\').flatpickr({\n      inline: false,\n      dateFormat: "d/m/Y",\n      maxDate: "today",\n      locale: "fr"\n    });\n    document.getElementById(\'practice_start_date1\').flatpickr({\n      inline: false,\n      dateFormat: "d/m/Y",\n      minDate: "today",\n      locale: "fr"\n    });\n    $(\'#register_specialist_fm\').validate({\n      rules: {\n        first_name: {\n          required: true //lettersonly: true,\n\n        },\n        last_name: {\n          required: true // lettersonly: true,\n\n        },\n        specialitycategory_id_fk: {\n          required: true // lettersonly: true,\n\n        },\n        practice_start_date: {\n          required: true // lettersonly: true,\n\n        },\n        email: {\n          required: true // lettersonly: true,\n\n        },\n        mobile_number: {\n          required: true // lettersonly: true,\n\n        }\n      },\n      messages: {\n        first_name: {\n          required: "champ est obligatoire."\n        },\n        last_name: {\n          required: "champ est obligatoire."\n        },\n        specialitycategory_id_fk: {\n          required: "champ est obligatoire."\n        },\n        practice_start_date: {\n          required: "champ est obligatoire."\n        },\n        email: {\n          required: "champ est obligatoire."\n        },\n        mobile_number: {\n          required: "champ est obligatoire."\n        }\n      },\n      errorElement: \'span\',\n      errorPlacement: function errorPlacement(error, element) {\n        console.log(error, element);\n        error.addClass(\'invalid-feedback\');\n        error.insertAfter(element);\n      },\n      highlight: function highlight(element, errorClass, validClass) {\n        $(element).addClass(\'is-invalid\');\n      },\n      unhighlight: function unhighlight(element, errorClass, validClass) {\n        $(element).removeClass(\'is-invalid\');\n      },\n      submitHandler: function submitHandler(form) {\n        console.log(form);\n        that.post(new FormData(form)).then(function (response) {\n          /*if(response.success) {\r\n              toastr.success(\'onnées ajoutées avec succès.\', \'Succès\');\r\n            that.$router.push({name: \'superadmin.enterprises\'});\r\n          }*/\n        });\n      }\n    });\n    $("#first_name,#last_name,#fullname,#account_holder_name").keypress(function (event) {\n      var inputValue = event.charCode;\n\n      if (!(inputValue >= 65 && inputValue <= 120) && inputValue != 32 && inputValue != 0) {\n        event.preventDefault();\n      }\n    });\n    jQuery.validator.addMethod("lettersonly", function (value, element) {\n      return this.optional(element) || /^[a-z]+$/i.test(value);\n    }, "<?=$this->lang->line(\'letters_error\');?>");\n    $.validator.addMethod("custom_number", function (value, element) {\n      return this.optional(element) || value === "NA" || value.match(/^[0-9,\\*-]+$/);\n    }, "Please enter a valid number");\n  },\n  watch: {\n    \'form.user.profile.country_id\': function formUserProfileCountry_id(newValue) {\n      if (newValue) {\n        this.cities = this.countries.filter(function (country) {\n          return country.id == newValue;\n        })[0].cities;\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/modules/app/modules/superadmin/modules/specialist/views/Add.vue?vue&type=script&lang=js&\n /* harmony default export */ var views_Addvue_type_script_lang_js_ = (Addvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./src/modules/app/modules/superadmin/modules/specialist/views/Add.vue?vue&type=style&index=0&lang=css&\nvar Addvue_type_style_index_0_lang_css_ = __webpack_require__("1f76");\n\n// EXTERNAL MODULE: ./node_modules/@vue/cli-service/node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__("0c7c");\n\n// CONCATENATED MODULE: ./src/modules/app/modules/superadmin/modules/specialist/views/Add.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  views_Addvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var Add = __webpack_exports__["default"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8758\n')},a9fb:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * =============================================================\n * dropify v0.2.1 - Override your input files with style.\n * https://github.com/JeremyFagis/dropify\n *\n * (c) 2017 - Jeremy FAGIS <jeremy@fagis.fr> (http://fagis.fr)\n * =============================================================\n */\n\n;(function(root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(\"1157\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function($) {\nvar pluginName = \"dropify\";\n\n/**\n * Dropify plugin\n *\n * @param {Object} element\n * @param {Array} options\n */\nfunction Dropify(element, options) {\n    if (!(window.File && window.FileReader && window.FileList && window.Blob)) {\n        return;\n    }\n\n    var defaults = {\n        defaultFile: '',\n        maxFileSize: 0,\n        minWidth: 0,\n        maxWidth: 0,\n        minHeight: 0,\n        maxHeight: 0,\n        showRemove: true,\n        showLoader: true,\n        showErrors: true,\n        errorTimeout: 3000,\n        errorsPosition: 'overlay',\n        imgFileExtensions: ['png', 'jpg', 'jpeg', 'gif', 'bmp'],\n        maxFileSizePreview: \"5M\",\n        allowedFormats: ['portrait', 'square', 'landscape'],\n        allowedFileExtensions: ['*'],\n        messages: {\n            'default': 'Drag and drop a file here or click',\n            'replace': 'Drag and drop or click to replace',\n            'remove':  'Remove',\n            'error':   'Ooops, something wrong happended.'\n        },\n        error: {\n            'fileSize': 'The file size is too big ({{ value }} max).',\n            'minWidth': 'The image width is too small ({{ value }}}px min).',\n            'maxWidth': 'The image width is too big ({{ value }}}px max).',\n            'minHeight': 'The image height is too small ({{ value }}}px min).',\n            'maxHeight': 'The image height is too big ({{ value }}px max).',\n            'imageFormat': 'The image format is not allowed ({{ value }} only).',\n            'fileExtension': 'The file is not allowed ({{ value }} only).'\n        },\n        tpl: {\n            wrap:            '<div class=\"dropify-wrapper\"></div>',\n            loader:          '<div class=\"dropify-loader\"></div>',\n            message:         '<div class=\"dropify-message\"><span class=\"file-icon\" /> <p>{{ default }}</p></div>',\n            preview:         '<div class=\"dropify-preview\"><span class=\"dropify-render\"></span><div class=\"dropify-infos\"><div class=\"dropify-infos-inner\"><p class=\"dropify-infos-message\">{{ replace }}</p></div></div></div>',\n            filename:        '<p class=\"dropify-filename\"><span class=\"dropify-filename-inner\"></span></p>',\n            clearButton:     '<button type=\"button\" class=\"dropify-clear\">{{ remove }}</button>',\n            errorLine:       '<p class=\"dropify-error\">{{ error }}</p>',\n            errorsContainer: '<div class=\"dropify-errors-container\"><ul></ul></div>'\n        }\n    };\n\n    this.element            = element;\n    this.input              = $(this.element);\n    this.wrapper            = null;\n    this.preview            = null;\n    this.filenameWrapper    = null;\n    this.settings           = $.extend(true, defaults, options, this.input.data());\n    this.errorsEvent        = $.Event('dropify.errors');\n    this.isDisabled         = false;\n    this.isInit             = false;\n    this.file               = {\n        object: null,\n        name: null,\n        size: null,\n        width: null,\n        height: null,\n        type: null\n    };\n\n    if (!Array.isArray(this.settings.allowedFormats)) {\n        this.settings.allowedFormats = this.settings.allowedFormats.split(' ');\n    }\n\n    if (!Array.isArray(this.settings.allowedFileExtensions)) {\n        this.settings.allowedFileExtensions = this.settings.allowedFileExtensions.split(' ');\n    }\n\n    this.onChange     = this.onChange.bind(this);\n    this.clearElement = this.clearElement.bind(this);\n    this.onFileReady  = this.onFileReady.bind(this);\n\n    this.translateMessages();\n    this.createElements();\n    this.setContainerSize();\n\n    this.errorsEvent.errors = [];\n\n    this.input.on('change', this.onChange);\n}\n\n/**\n * On change event\n */\nDropify.prototype.onChange = function()\n{\n    this.resetPreview();\n    this.readFile(this.element);\n};\n\n/**\n * Create dom elements\n */\nDropify.prototype.createElements = function()\n{\n    this.isInit = true;\n    this.input.wrap($(this.settings.tpl.wrap));\n    this.wrapper = this.input.parent();\n\n    var messageWrapper = $(this.settings.tpl.message).insertBefore(this.input);\n    $(this.settings.tpl.errorLine).appendTo(messageWrapper);\n\n    if (this.isTouchDevice() === true) {\n        this.wrapper.addClass('touch-fallback');\n    }\n\n    if (this.input.attr('disabled')) {\n        this.isDisabled = true;\n        this.wrapper.addClass('disabled');\n    }\n\n    if (this.settings.showLoader === true) {\n        this.loader = $(this.settings.tpl.loader);\n        this.loader.insertBefore(this.input);\n    }\n\n    this.preview = $(this.settings.tpl.preview);\n    this.preview.insertAfter(this.input);\n\n    if (this.isDisabled === false && this.settings.showRemove === true) {\n        this.clearButton = $(this.settings.tpl.clearButton);\n        this.clearButton.insertAfter(this.input);\n        this.clearButton.on('click', this.clearElement);\n    }\n\n    this.filenameWrapper = $(this.settings.tpl.filename);\n    this.filenameWrapper.prependTo(this.preview.find('.dropify-infos-inner'));\n\n    if (this.settings.showErrors === true) {\n        this.errorsContainer = $(this.settings.tpl.errorsContainer);\n\n        if (this.settings.errorsPosition === 'outside') {\n            this.errorsContainer.insertAfter(this.wrapper);\n        } else {\n            this.errorsContainer.insertBefore(this.input);\n        }\n    }\n\n    var defaultFile = this.settings.defaultFile || '';\n\n    if (defaultFile.trim() !== '') {\n        this.file.name = this.cleanFilename(defaultFile);\n        this.setPreview(this.isImage(), defaultFile);\n    }\n};\n\n/**\n * Read the file using FileReader\n *\n * @param  {Object} input\n */\nDropify.prototype.readFile = function(input)\n{\n    if (input.files && input.files[0]) {\n        var reader         = new FileReader();\n        var image          = new Image();\n        var file           = input.files[0];\n        var srcBase64      = null;\n        var _this          = this;\n        var eventFileReady = $.Event(\"dropify.fileReady\");\n\n        this.clearErrors();\n        this.showLoader();\n        this.setFileInformations(file);\n        this.errorsEvent.errors = [];\n        this.checkFileSize();\n\t\tthis.isFileExtensionAllowed();\n\n        if (this.isImage() && this.file.size < this.sizeToByte(this.settings.maxFileSizePreview)) {\n            this.input.on('dropify.fileReady', this.onFileReady);\n            reader.readAsDataURL(file);\n            reader.onload = function(_file) {\n                srcBase64 = _file.target.result;\n                image.src = _file.target.result;\n                image.onload = function() {\n                    _this.setFileDimensions(this.width, this.height);\n                    _this.validateImage();\n                    _this.input.trigger(eventFileReady, [true, srcBase64]);\n                };\n\n            }.bind(this);\n        } else {\n            this.onFileReady(false);\n        }\n    }\n};\n\n/**\n * On file ready to show\n *\n * @param  {Event} event\n * @param  {Bool} previewable\n * @param  {String} src\n */\nDropify.prototype.onFileReady = function(event, previewable, src)\n{\n    this.input.off('dropify.fileReady', this.onFileReady);\n\n    if (this.errorsEvent.errors.length === 0) {\n        this.setPreview(previewable, src);\n    } else {\n        this.input.trigger(this.errorsEvent, [this]);\n        for (var i = this.errorsEvent.errors.length - 1; i >= 0; i--) {\n            var errorNamespace = this.errorsEvent.errors[i].namespace;\n            var errorKey = errorNamespace.split('.').pop();\n            this.showError(errorKey);\n        }\n\n        if (typeof this.errorsContainer !== \"undefined\") {\n            this.errorsContainer.addClass('visible');\n\n            var errorsContainer = this.errorsContainer;\n            setTimeout(function(){ errorsContainer.removeClass('visible'); }, this.settings.errorTimeout);\n        }\n\n        this.wrapper.addClass('has-error');\n        this.resetPreview();\n        this.clearElement();\n    }\n};\n\n/**\n * Set file informations\n *\n * @param {File} file\n */\nDropify.prototype.setFileInformations = function(file)\n{\n    this.file.object = file;\n    this.file.name   = file.name;\n    this.file.size   = file.size;\n    this.file.type   = file.type;\n    this.file.width  = null;\n    this.file.height = null;\n};\n\n/**\n * Set file dimensions\n *\n * @param {Int} width\n * @param {Int} height\n */\nDropify.prototype.setFileDimensions = function(width, height)\n{\n    this.file.width  = width;\n    this.file.height = height;\n};\n\n/**\n * Set the preview and animate it\n *\n * @param {String} src\n */\nDropify.prototype.setPreview = function(previewable, src)\n{\n    this.wrapper.removeClass('has-error').addClass('has-preview');\n    this.filenameWrapper.children('.dropify-filename-inner').html(this.file.name);\n    var render = this.preview.children('.dropify-render');\n\n    this.hideLoader();\n\n    if (previewable === true) {\n        var imgTag = $('<img />').attr('src', src);\n\n        if (this.settings.height) {\n            imgTag.css(\"max-height\", this.settings.height);\n        }\n\n        imgTag.appendTo(render);\n    } else {\n        $('<i />').attr('class', 'dropify-font-file').appendTo(render);\n        $('<span class=\"dropify-extension\" />').html(this.getFileType()).appendTo(render);\n    }\n    this.preview.fadeIn();\n};\n\n/**\n * Reset the preview\n */\nDropify.prototype.resetPreview = function()\n{\n    this.wrapper.removeClass('has-preview');\n    var render = this.preview.children('.dropify-render');\n    render.find('.dropify-extension').remove();\n    render.find('i').remove();\n    render.find('img').remove();\n    this.preview.hide();\n    this.hideLoader();\n};\n\n/**\n * Clean the src and get the filename\n *\n * @param  {String} src\n *\n * @return {String} filename\n */\nDropify.prototype.cleanFilename = function(src)\n{\n    var filename = src.split('\\\\').pop();\n    if (filename == src) {\n        filename = src.split('/').pop();\n    }\n\n    return src !== \"\" ? filename : '';\n};\n\n/**\n * Clear the element, events are available\n */\nDropify.prototype.clearElement = function()\n{\n    if (this.errorsEvent.errors.length === 0) {\n        var eventBefore = $.Event(\"dropify.beforeClear\");\n        this.input.trigger(eventBefore, [this]);\n\n        if (eventBefore.result !== false) {\n            this.resetFile();\n            this.input.val('');\n            this.resetPreview();\n\n            this.input.trigger($.Event(\"dropify.afterClear\"), [this]);\n        }\n    } else {\n        this.resetFile();\n        this.input.val('');\n        this.resetPreview();\n    }\n};\n\n/**\n * Reset file informations\n */\nDropify.prototype.resetFile = function()\n{\n    this.file.object = null;\n    this.file.name   = null;\n    this.file.size   = null;\n    this.file.type   = null;\n    this.file.width  = null;\n    this.file.height = null;\n};\n\n/**\n * Set the container height\n */\nDropify.prototype.setContainerSize = function()\n{\n    if (this.settings.height) {\n        this.wrapper.height(this.settings.height);\n    }\n};\n\n/**\n * Test if it's touch screen\n *\n * @return {Boolean}\n */\nDropify.prototype.isTouchDevice = function()\n{\n    return (('ontouchstart' in window) ||\n            (navigator.MaxTouchPoints > 0) ||\n            (navigator.msMaxTouchPoints > 0));\n};\n\n/**\n * Get the file type.\n *\n * @return {String}\n */\nDropify.prototype.getFileType = function()\n{\n    return this.file.name.split('.').pop().toLowerCase();\n};\n\n/**\n * Test if the file is an image\n *\n * @return {Boolean}\n */\nDropify.prototype.isImage = function()\n{\n    if (this.settings.imgFileExtensions.indexOf(this.getFileType()) != \"-1\") {\n        return true;\n    }\n\n    return false;\n};\n\n/**\n* Test if the file extension is allowed\n*\n* @return {Boolean}\n*/\nDropify.prototype.isFileExtensionAllowed = function () {\n\n\tif (this.settings.allowedFileExtensions.indexOf('*') != \"-1\" || \n        this.settings.allowedFileExtensions.indexOf(this.getFileType()) != \"-1\") {\n\t\treturn true;\n\t}\n\tthis.pushError(\"fileExtension\");\n\n\treturn false;\n};\n\n/**\n * Translate messages if needed.\n */\nDropify.prototype.translateMessages = function()\n{\n    for (var name in this.settings.tpl) {\n        for (var key in this.settings.messages) {\n            this.settings.tpl[name] = this.settings.tpl[name].replace('{{ ' + key + ' }}', this.settings.messages[key]);\n        }\n    }\n};\n\n/**\n * Check the limit filesize.\n */\nDropify.prototype.checkFileSize = function()\n{\n    if (this.sizeToByte(this.settings.maxFileSize) !== 0 && this.file.size > this.sizeToByte(this.settings.maxFileSize)) {\n        this.pushError(\"fileSize\");\n    }\n};\n\n/**\n * Convert filesize to byte.\n *\n * @return {Int} value\n */\nDropify.prototype.sizeToByte = function(size)\n{\n    var value = 0;\n\n    if (size !== 0) {\n        var unit  = size.slice(-1).toUpperCase(),\n            kb    = 1024,\n            mb    = kb * 1024,\n            gb    = mb * 1024;\n\n        if (unit === 'K') {\n            value = parseFloat(size) * kb;\n        } else if (unit === 'M') {\n            value = parseFloat(size) * mb;\n        } else if (unit === 'G') {\n            value = parseFloat(size) * gb;\n        }\n    }\n\n    return value;\n};\n\n/**\n * Validate image dimensions and format\n */\nDropify.prototype.validateImage = function()\n{\n    if (this.settings.minWidth !== 0 && this.settings.minWidth >= this.file.width) {\n        this.pushError(\"minWidth\");\n    }\n\n    if (this.settings.maxWidth !== 0 && this.settings.maxWidth <= this.file.width) {\n        this.pushError(\"maxWidth\");\n    }\n\n    if (this.settings.minHeight !== 0 && this.settings.minHeight >= this.file.height) {\n        this.pushError(\"minHeight\");\n    }\n\n    if (this.settings.maxHeight !== 0 && this.settings.maxHeight <= this.file.height) {\n        this.pushError(\"maxHeight\");\n    }\n\n    if (this.settings.allowedFormats.indexOf(this.getImageFormat()) == \"-1\") {\n        this.pushError(\"imageFormat\");\n    }\n};\n\n/**\n * Get image format.\n *\n * @return {String}\n */\nDropify.prototype.getImageFormat = function()\n{\n    if (this.file.width == this.file.height) {\n        return \"square\";\n    }\n\n    if (this.file.width < this.file.height) {\n        return \"portrait\";\n    }\n\n    if (this.file.width > this.file.height) {\n        return \"landscape\";\n    }\n};\n\n/**\n* Push error\n*\n* @param {String} errorKey\n*/\nDropify.prototype.pushError = function(errorKey) {\n    var e = $.Event(\"dropify.error.\" + errorKey);\n    this.errorsEvent.errors.push(e);\n    this.input.trigger(e, [this]);\n};\n\n/**\n * Clear errors\n */\nDropify.prototype.clearErrors = function()\n{\n    if (typeof this.errorsContainer !== \"undefined\") {\n        this.errorsContainer.children('ul').html('');\n    }\n};\n\n/**\n * Show error in DOM\n *\n * @param  {String} errorKey\n */\nDropify.prototype.showError = function(errorKey)\n{\n    if (typeof this.errorsContainer !== \"undefined\") {\n        this.errorsContainer.children('ul').append('<li>' + this.getError(errorKey) + '</li>');\n    }\n};\n\n/**\n * Get error message\n *\n * @return  {String} message\n */\nDropify.prototype.getError = function(errorKey)\n{\n    var error = this.settings.error[errorKey],\n        value = '';\n\n    if (errorKey === 'fileSize') {\n        value = this.settings.maxFileSize;\n    } else if (errorKey === 'minWidth') {\n        value = this.settings.minWidth;\n    } else if (errorKey === 'maxWidth') {\n        value = this.settings.maxWidth;\n    } else if (errorKey === 'minHeight') {\n        value = this.settings.minHeight;\n    } else if (errorKey === 'maxHeight') {\n        value = this.settings.maxHeight;\n    } else if (errorKey === 'imageFormat') {\n        value = this.settings.allowedFormats.join(', ');\n    } else if (errorKey === 'fileExtension') {\n\t\tvalue = this.settings.allowedFileExtensions.join(', ');\n\t}\n\n    if (value !== '') {\n        return error.replace('{{ value }}', value);\n    }\n\n    return error;\n};\n\n/**\n * Show the loader\n */\nDropify.prototype.showLoader = function()\n{\n    if (typeof this.loader !== \"undefined\") {\n        this.loader.show();\n    }\n};\n\n/**\n * Hide the loader\n */\nDropify.prototype.hideLoader = function()\n{\n    if (typeof this.loader !== \"undefined\") {\n        this.loader.hide();\n    }\n};\n\n/**\n * Destroy dropify\n */\nDropify.prototype.destroy = function()\n{\n    this.input.siblings().remove();\n    this.input.unwrap();\n    this.isInit = false;\n};\n\n/**\n * Init dropify\n */\nDropify.prototype.init = function()\n{\n    this.createElements();\n};\n\n/**\n * Test if element is init\n */\nDropify.prototype.isDropified = function()\n{\n    return this.isInit;\n};\n\n$.fn[pluginName] = function(options) {\n    this.each(function() {\n        if (!$.data(this, pluginName)) {\n            $.data(this, pluginName, new Dropify(this, options));\n        }\n    });\n\n    return this;\n};\n\n\nreturn Dropify;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///a9fb\n")},cf06:function(module,exports,__webpack_require__){eval('/* flatpickr v4.6.2, @license MIT */\n(function (global, factory) {\n     true ? module.exports = factory() :\n    undefined;\n}(this, function () { \'use strict\';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the "License"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    var HOOKS = [\n        "onChange",\n        "onClose",\n        "onDayCreate",\n        "onDestroy",\n        "onKeyDown",\n        "onMonthChange",\n        "onOpen",\n        "onParseConfig",\n        "onReady",\n        "onValueUpdate",\n        "onYearChange",\n        "onPreCalendarPosition",\n    ];\n    var defaults = {\n        _disable: [],\n        _enable: [],\n        allowInput: false,\n        altFormat: "F j, Y",\n        altInput: false,\n        altInputClass: "form-control input",\n        animate: typeof window === "object" &&\n            window.navigator.userAgent.indexOf("MSIE") === -1,\n        ariaDateFormat: "F j, Y",\n        clickOpens: true,\n        closeOnSelect: true,\n        conjunction: ", ",\n        dateFormat: "Y-m-d",\n        defaultHour: 12,\n        defaultMinute: 0,\n        defaultSeconds: 0,\n        disable: [],\n        disableMobile: false,\n        enable: [],\n        enableSeconds: false,\n        enableTime: false,\n        errorHandler: function (err) {\n            return typeof console !== "undefined" && console.warn(err);\n        },\n        getWeek: function (givenDate) {\n            var date = new Date(givenDate.getTime());\n            date.setHours(0, 0, 0, 0);\n            // Thursday in current week decides the year.\n            date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));\n            // January 4 is always in week 1.\n            var week1 = new Date(date.getFullYear(), 0, 4);\n            // Adjust to Thursday in week 1 and count number of weeks from date to week1.\n            return (1 +\n                Math.round(((date.getTime() - week1.getTime()) / 86400000 -\n                    3 +\n                    ((week1.getDay() + 6) % 7)) /\n                    7));\n        },\n        hourIncrement: 1,\n        ignoredFocusElements: [],\n        inline: false,\n        locale: "default",\n        minuteIncrement: 5,\n        mode: "single",\n        monthSelectorType: "dropdown",\n        nextArrow: "<svg version=\'1.1\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' viewBox=\'0 0 17 17\'><g></g><path d=\'M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z\' /></svg>",\n        noCalendar: false,\n        now: new Date(),\n        onChange: [],\n        onClose: [],\n        onDayCreate: [],\n        onDestroy: [],\n        onKeyDown: [],\n        onMonthChange: [],\n        onOpen: [],\n        onParseConfig: [],\n        onReady: [],\n        onValueUpdate: [],\n        onYearChange: [],\n        onPreCalendarPosition: [],\n        plugins: [],\n        position: "auto",\n        positionElement: undefined,\n        prevArrow: "<svg version=\'1.1\' xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' viewBox=\'0 0 17 17\'><g></g><path d=\'M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z\' /></svg>",\n        shorthandCurrentMonth: false,\n        showMonths: 1,\n        static: false,\n        time_24hr: false,\n        weekNumbers: false,\n        wrap: false\n    };\n\n    var english = {\n        weekdays: {\n            shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n            longhand: [\n                "Sunday",\n                "Monday",\n                "Tuesday",\n                "Wednesday",\n                "Thursday",\n                "Friday",\n                "Saturday",\n            ]\n        },\n        months: {\n            shorthand: [\n                "Jan",\n                "Feb",\n                "Mar",\n                "Apr",\n                "May",\n                "Jun",\n                "Jul",\n                "Aug",\n                "Sep",\n                "Oct",\n                "Nov",\n                "Dec",\n            ],\n            longhand: [\n                "January",\n                "February",\n                "March",\n                "April",\n                "May",\n                "June",\n                "July",\n                "August",\n                "September",\n                "October",\n                "November",\n                "December",\n            ]\n        },\n        daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n        firstDayOfWeek: 0,\n        ordinal: function (nth) {\n            var s = nth % 100;\n            if (s > 3 && s < 21)\n                return "th";\n            switch (s % 10) {\n                case 1:\n                    return "st";\n                case 2:\n                    return "nd";\n                case 3:\n                    return "rd";\n                default:\n                    return "th";\n            }\n        },\n        rangeSeparator: " to ",\n        weekAbbreviation: "Wk",\n        scrollTitle: "Scroll to increment",\n        toggleTitle: "Click to toggle",\n        amPM: ["AM", "PM"],\n        yearAriaLabel: "Year",\n        hourAriaLabel: "Hour",\n        minuteAriaLabel: "Minute",\n        time_24hr: false\n    };\n\n    var pad = function (number) { return ("0" + number).slice(-2); };\n    var int = function (bool) { return (bool === true ? 1 : 0); };\n    /* istanbul ignore next */\n    function debounce(func, wait, immediate) {\n        if (immediate === void 0) { immediate = false; }\n        var timeout;\n        return function () {\n            var context = this, args = arguments;\n            timeout !== null && clearTimeout(timeout);\n            timeout = window.setTimeout(function () {\n                timeout = null;\n                if (!immediate)\n                    func.apply(context, args);\n            }, wait);\n            if (immediate && !timeout)\n                func.apply(context, args);\n        };\n    }\n    var arrayify = function (obj) {\n        return obj instanceof Array ? obj : [obj];\n    };\n\n    function toggleClass(elem, className, bool) {\n        if (bool === true)\n            return elem.classList.add(className);\n        elem.classList.remove(className);\n    }\n    function createElement(tag, className, content) {\n        var e = window.document.createElement(tag);\n        className = className || "";\n        content = content || "";\n        e.className = className;\n        if (content !== undefined)\n            e.textContent = content;\n        return e;\n    }\n    function clearNode(node) {\n        while (node.firstChild)\n            node.removeChild(node.firstChild);\n    }\n    function findParent(node, condition) {\n        if (condition(node))\n            return node;\n        else if (node.parentNode)\n            return findParent(node.parentNode, condition);\n        return undefined; // nothing found\n    }\n    function createNumberInput(inputClassName, opts) {\n        var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");\n        if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {\n            numInput.type = "number";\n        }\n        else {\n            numInput.type = "text";\n            numInput.pattern = "\\\\d*";\n        }\n        if (opts !== undefined)\n            for (var key in opts)\n                numInput.setAttribute(key, opts[key]);\n        wrapper.appendChild(numInput);\n        wrapper.appendChild(arrowUp);\n        wrapper.appendChild(arrowDown);\n        return wrapper;\n    }\n    function getEventTarget(event) {\n        if (typeof event.composedPath === "function") {\n            var path = event.composedPath();\n            return path[0];\n        }\n        return event.target;\n    }\n\n    var doNothing = function () { return undefined; };\n    var monthToStr = function (monthNumber, shorthand, locale) { return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]; };\n    var revFormat = {\n        D: doNothing,\n        F: function (dateObj, monthName, locale) {\n            dateObj.setMonth(locale.months.longhand.indexOf(monthName));\n        },\n        G: function (dateObj, hour) {\n            dateObj.setHours(parseFloat(hour));\n        },\n        H: function (dateObj, hour) {\n            dateObj.setHours(parseFloat(hour));\n        },\n        J: function (dateObj, day) {\n            dateObj.setDate(parseFloat(day));\n        },\n        K: function (dateObj, amPM, locale) {\n            dateObj.setHours((dateObj.getHours() % 12) +\n                12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));\n        },\n        M: function (dateObj, shortMonth, locale) {\n            dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\n        },\n        S: function (dateObj, seconds) {\n            dateObj.setSeconds(parseFloat(seconds));\n        },\n        U: function (_, unixSeconds) { return new Date(parseFloat(unixSeconds) * 1000); },\n        W: function (dateObj, weekNum, locale) {\n            var weekNumber = parseInt(weekNum);\n            var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);\n            date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);\n            return date;\n        },\n        Y: function (dateObj, year) {\n            dateObj.setFullYear(parseFloat(year));\n        },\n        Z: function (_, ISODate) { return new Date(ISODate); },\n        d: function (dateObj, day) {\n            dateObj.setDate(parseFloat(day));\n        },\n        h: function (dateObj, hour) {\n            dateObj.setHours(parseFloat(hour));\n        },\n        i: function (dateObj, minutes) {\n            dateObj.setMinutes(parseFloat(minutes));\n        },\n        j: function (dateObj, day) {\n            dateObj.setDate(parseFloat(day));\n        },\n        l: doNothing,\n        m: function (dateObj, month) {\n            dateObj.setMonth(parseFloat(month) - 1);\n        },\n        n: function (dateObj, month) {\n            dateObj.setMonth(parseFloat(month) - 1);\n        },\n        s: function (dateObj, seconds) {\n            dateObj.setSeconds(parseFloat(seconds));\n        },\n        u: function (_, unixMillSeconds) {\n            return new Date(parseFloat(unixMillSeconds));\n        },\n        w: doNothing,\n        y: function (dateObj, year) {\n            dateObj.setFullYear(2000 + parseFloat(year));\n        }\n    };\n    var tokenRegex = {\n        D: "(\\\\w+)",\n        F: "(\\\\w+)",\n        G: "(\\\\d\\\\d|\\\\d)",\n        H: "(\\\\d\\\\d|\\\\d)",\n        J: "(\\\\d\\\\d|\\\\d)\\\\w+",\n        K: "",\n        M: "(\\\\w+)",\n        S: "(\\\\d\\\\d|\\\\d)",\n        U: "(.+)",\n        W: "(\\\\d\\\\d|\\\\d)",\n        Y: "(\\\\d{4})",\n        Z: "(.+)",\n        d: "(\\\\d\\\\d|\\\\d)",\n        h: "(\\\\d\\\\d|\\\\d)",\n        i: "(\\\\d\\\\d|\\\\d)",\n        j: "(\\\\d\\\\d|\\\\d)",\n        l: "(\\\\w+)",\n        m: "(\\\\d\\\\d|\\\\d)",\n        n: "(\\\\d\\\\d|\\\\d)",\n        s: "(\\\\d\\\\d|\\\\d)",\n        u: "(.+)",\n        w: "(\\\\d\\\\d|\\\\d)",\n        y: "(\\\\d{2})"\n    };\n    var formats = {\n        // get the date in UTC\n        Z: function (date) { return date.toISOString(); },\n        // weekday name, short, e.g. Thu\n        D: function (date, locale, options) {\n            return locale.weekdays.shorthand[formats.w(date, locale, options)];\n        },\n        // full month name e.g. January\n        F: function (date, locale, options) {\n            return monthToStr(formats.n(date, locale, options) - 1, false, locale);\n        },\n        // padded hour 1-12\n        G: function (date, locale, options) {\n            return pad(formats.h(date, locale, options));\n        },\n        // hours with leading zero e.g. 03\n        H: function (date) { return pad(date.getHours()); },\n        // day (1-30) with ordinal suffix e.g. 1st, 2nd\n        J: function (date, locale) {\n            return locale.ordinal !== undefined\n                ? date.getDate() + locale.ordinal(date.getDate())\n                : date.getDate();\n        },\n        // AM/PM\n        K: function (date, locale) { return locale.amPM[int(date.getHours() > 11)]; },\n        // shorthand month e.g. Jan, Sep, Oct, etc\n        M: function (date, locale) {\n            return monthToStr(date.getMonth(), true, locale);\n        },\n        // seconds 00-59\n        S: function (date) { return pad(date.getSeconds()); },\n        // unix timestamp\n        U: function (date) { return date.getTime() / 1000; },\n        W: function (date, _, options) {\n            return options.getWeek(date);\n        },\n        // full year e.g. 2016\n        Y: function (date) { return date.getFullYear(); },\n        // day in month, padded (01-30)\n        d: function (date) { return pad(date.getDate()); },\n        // hour from 1-12 (am/pm)\n        h: function (date) { return (date.getHours() % 12 ? date.getHours() % 12 : 12); },\n        // minutes, padded with leading zero e.g. 09\n        i: function (date) { return pad(date.getMinutes()); },\n        // day in month (1-30)\n        j: function (date) { return date.getDate(); },\n        // weekday name, full, e.g. Thursday\n        l: function (date, locale) {\n            return locale.weekdays.longhand[date.getDay()];\n        },\n        // padded month number (01-12)\n        m: function (date) { return pad(date.getMonth() + 1); },\n        // the month number (1-12)\n        n: function (date) { return date.getMonth() + 1; },\n        // seconds 0-59\n        s: function (date) { return date.getSeconds(); },\n        // Unix Milliseconds\n        u: function (date) { return date.getTime(); },\n        // number of the day of the week\n        w: function (date) { return date.getDay(); },\n        // last two digits of year e.g. 16 for 2016\n        y: function (date) { return String(date.getFullYear()).substring(2); }\n    };\n\n    var createDateFormatter = function (_a) {\n        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;\n        return function (dateObj, frmt, overrideLocale) {\n            var locale = overrideLocale || l10n;\n            if (config.formatDate !== undefined) {\n                return config.formatDate(dateObj, frmt, locale);\n            }\n            return frmt\n                .split("")\n                .map(function (c, i, arr) {\n                return formats[c] && arr[i - 1] !== "\\\\"\n                    ? formats[c](dateObj, locale, config)\n                    : c !== "\\\\"\n                        ? c\n                        : "";\n            })\n                .join("");\n        };\n    };\n    var createDateParser = function (_a) {\n        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;\n        return function (date, givenFormat, timeless, customLocale) {\n            if (date !== 0 && !date)\n                return undefined;\n            var locale = customLocale || l10n;\n            var parsedDate;\n            var dateOrig = date;\n            if (date instanceof Date)\n                parsedDate = new Date(date.getTime());\n            else if (typeof date !== "string" &&\n                date.toFixed !== undefined // timestamp\n            )\n                // create a copy\n                parsedDate = new Date(date);\n            else if (typeof date === "string") {\n                // date string\n                var format = givenFormat || (config || defaults).dateFormat;\n                var datestr = String(date).trim();\n                if (datestr === "today") {\n                    parsedDate = new Date();\n                    timeless = true;\n                }\n                else if (/Z$/.test(datestr) ||\n                    /GMT$/.test(datestr) // datestrings w/ timezone\n                )\n                    parsedDate = new Date(date);\n                else if (config && config.parseDate)\n                    parsedDate = config.parseDate(date, format);\n                else {\n                    parsedDate =\n                        !config || !config.noCalendar\n                            ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)\n                            : new Date(new Date().setHours(0, 0, 0, 0));\n                    var matched = void 0, ops = [];\n                    for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {\n                        var token_1 = format[i];\n                        var isBackSlash = token_1 === "\\\\";\n                        var escaped = format[i - 1] === "\\\\" || isBackSlash;\n                        if (tokenRegex[token_1] && !escaped) {\n                            regexStr += tokenRegex[token_1];\n                            var match = new RegExp(regexStr).exec(date);\n                            if (match && (matched = true)) {\n                                ops[token_1 !== "Y" ? "push" : "unshift"]({\n                                    fn: revFormat[token_1],\n                                    val: match[++matchIndex]\n                                });\n                            }\n                        }\n                        else if (!isBackSlash)\n                            regexStr += "."; // don\'t really care\n                        ops.forEach(function (_a) {\n                            var fn = _a.fn, val = _a.val;\n                            return (parsedDate = fn(parsedDate, val, locale) || parsedDate);\n                        });\n                    }\n                    parsedDate = matched ? parsedDate : undefined;\n                }\n            }\n            /* istanbul ignore next */\n            if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n                config.errorHandler(new Error("Invalid date provided: " + dateOrig));\n                return undefined;\n            }\n            if (timeless === true)\n                parsedDate.setHours(0, 0, 0, 0);\n            return parsedDate;\n        };\n    };\n    /**\n     * Compute the difference in dates, measured in ms\n     */\n    function compareDates(date1, date2, timeless) {\n        if (timeless === void 0) { timeless = true; }\n        if (timeless !== false) {\n            return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -\n                new Date(date2.getTime()).setHours(0, 0, 0, 0));\n        }\n        return date1.getTime() - date2.getTime();\n    }\n    var isBetween = function (ts, ts1, ts2) {\n        return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n    };\n    var duration = {\n        DAY: 86400000\n    };\n\n    if (typeof Object.assign !== "function") {\n        Object.assign = function (target) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (!target) {\n                throw TypeError("Cannot convert undefined or null to object");\n            }\n            var _loop_1 = function (source) {\n                if (source) {\n                    Object.keys(source).forEach(function (key) { return (target[key] = source[key]); });\n                }\n            };\n            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n                var source = args_1[_a];\n                _loop_1(source);\n            }\n            return target;\n        };\n    }\n\n    var DEBOUNCED_CHANGE_MS = 300;\n    function FlatpickrInstance(element, instanceConfig) {\n        var self = {\n            config: __assign({}, defaults, flatpickr.defaultConfig),\n            l10n: english\n        };\n        self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });\n        self._handlers = [];\n        self.pluginElements = [];\n        self.loadedPlugins = [];\n        self._bind = bind;\n        self._setHoursFromDate = setHoursFromDate;\n        self._positionCalendar = positionCalendar;\n        self.changeMonth = changeMonth;\n        self.changeYear = changeYear;\n        self.clear = clear;\n        self.close = close;\n        self._createElement = createElement;\n        self.destroy = destroy;\n        self.isEnabled = isEnabled;\n        self.jumpToDate = jumpToDate;\n        self.open = open;\n        self.redraw = redraw;\n        self.set = set;\n        self.setDate = setDate;\n        self.toggle = toggle;\n        function setupHelperFunctions() {\n            self.utils = {\n                getDaysInMonth: function (month, yr) {\n                    if (month === void 0) { month = self.currentMonth; }\n                    if (yr === void 0) { yr = self.currentYear; }\n                    if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))\n                        return 29;\n                    return self.l10n.daysInMonth[month];\n                }\n            };\n        }\n        function init() {\n            self.element = self.input = element;\n            self.isOpen = false;\n            parseConfig();\n            setupLocale();\n            setupInputs();\n            setupDates();\n            setupHelperFunctions();\n            if (!self.isMobile)\n                build();\n            bindEvents();\n            if (self.selectedDates.length || self.config.noCalendar) {\n                if (self.config.enableTime) {\n                    setHoursFromDate(self.config.noCalendar\n                        ? self.latestSelectedDateObj || self.config.minDate\n                        : undefined);\n                }\n                updateValue(false);\n            }\n            setCalendarWidth();\n            self.showTimeInput =\n                self.selectedDates.length > 0 || self.config.noCalendar;\n            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n            /* TODO: investigate this further\n        \n              Currently, there is weird positioning behavior in safari causing pages\n              to scroll up. https://github.com/chmln/flatpickr/issues/563\n        \n              However, most browsers are not Safari and positioning is expensive when used\n              in scale. https://github.com/chmln/flatpickr/issues/1096\n            */\n            if (!self.isMobile && isSafari) {\n                positionCalendar();\n            }\n            triggerEvent("onReady");\n        }\n        function bindToInstance(fn) {\n            return fn.bind(self);\n        }\n        function setCalendarWidth() {\n            var config = self.config;\n            if (config.weekNumbers === false && config.showMonths === 1)\n                return;\n            else if (config.noCalendar !== true) {\n                window.requestAnimationFrame(function () {\n                    if (self.calendarContainer !== undefined) {\n                        self.calendarContainer.style.visibility = "hidden";\n                        self.calendarContainer.style.display = "block";\n                    }\n                    if (self.daysContainer !== undefined) {\n                        var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;\n                        self.daysContainer.style.width = daysWidth + "px";\n                        self.calendarContainer.style.width =\n                            daysWidth +\n                                (self.weekWrapper !== undefined\n                                    ? self.weekWrapper.offsetWidth\n                                    : 0) +\n                                "px";\n                        self.calendarContainer.style.removeProperty("visibility");\n                        self.calendarContainer.style.removeProperty("display");\n                    }\n                });\n            }\n        }\n        /**\n         * The handler for all events targeting the time inputs\n         */\n        function updateTime(e) {\n            if (self.selectedDates.length === 0) {\n                setDefaultTime();\n            }\n            if (e !== undefined && e.type !== "blur") {\n                timeWrapper(e);\n            }\n            var prevValue = self._input.value;\n            setHoursFromInputs();\n            updateValue();\n            if (self._input.value !== prevValue) {\n                self._debouncedChange();\n            }\n        }\n        function ampm2military(hour, amPM) {\n            return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);\n        }\n        function military2ampm(hour) {\n            switch (hour % 24) {\n                case 0:\n                case 12:\n                    return 12;\n                default:\n                    return hour % 12;\n            }\n        }\n        /**\n         * Syncs the selected date object time with user\'s time input\n         */\n        function setHoursFromInputs() {\n            if (self.hourElement === undefined || self.minuteElement === undefined)\n                return;\n            var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined\n                ? (parseInt(self.secondElement.value, 10) || 0) % 60\n                : 0;\n            if (self.amPM !== undefined) {\n                hours = ampm2military(hours, self.amPM.textContent);\n            }\n            var limitMinHours = self.config.minTime !== undefined ||\n                (self.config.minDate &&\n                    self.minDateHasTime &&\n                    self.latestSelectedDateObj &&\n                    compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===\n                        0);\n            var limitMaxHours = self.config.maxTime !== undefined ||\n                (self.config.maxDate &&\n                    self.maxDateHasTime &&\n                    self.latestSelectedDateObj &&\n                    compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===\n                        0);\n            if (limitMaxHours) {\n                var maxTime = self.config.maxTime !== undefined\n                    ? self.config.maxTime\n                    : self.config.maxDate;\n                hours = Math.min(hours, maxTime.getHours());\n                if (hours === maxTime.getHours())\n                    minutes = Math.min(minutes, maxTime.getMinutes());\n                if (minutes === maxTime.getMinutes())\n                    seconds = Math.min(seconds, maxTime.getSeconds());\n            }\n            if (limitMinHours) {\n                var minTime = self.config.minTime !== undefined\n                    ? self.config.minTime\n                    : self.config.minDate;\n                hours = Math.max(hours, minTime.getHours());\n                if (hours === minTime.getHours())\n                    minutes = Math.max(minutes, minTime.getMinutes());\n                if (minutes === minTime.getMinutes())\n                    seconds = Math.max(seconds, minTime.getSeconds());\n            }\n            setHours(hours, minutes, seconds);\n        }\n        /**\n         * Syncs time input values with a date\n         */\n        function setHoursFromDate(dateObj) {\n            var date = dateObj || self.latestSelectedDateObj;\n            if (date)\n                setHours(date.getHours(), date.getMinutes(), date.getSeconds());\n        }\n        function setDefaultHours() {\n            var hours = self.config.defaultHour;\n            var minutes = self.config.defaultMinute;\n            var seconds = self.config.defaultSeconds;\n            if (self.config.minDate !== undefined) {\n                var minHr = self.config.minDate.getHours();\n                var minMinutes = self.config.minDate.getMinutes();\n                hours = Math.max(hours, minHr);\n                if (hours === minHr)\n                    minutes = Math.max(minMinutes, minutes);\n                if (hours === minHr && minutes === minMinutes)\n                    seconds = self.config.minDate.getSeconds();\n            }\n            if (self.config.maxDate !== undefined) {\n                var maxHr = self.config.maxDate.getHours();\n                var maxMinutes = self.config.maxDate.getMinutes();\n                hours = Math.min(hours, maxHr);\n                if (hours === maxHr)\n                    minutes = Math.min(maxMinutes, minutes);\n                if (hours === maxHr && minutes === maxMinutes)\n                    seconds = self.config.maxDate.getSeconds();\n            }\n            setHours(hours, minutes, seconds);\n        }\n        /**\n         * Sets the hours, minutes, and optionally seconds\n         * of the latest selected date object and the\n         * corresponding time inputs\n         * @param {Number} hours the hour. whether its military\n         *                 or am-pm gets inferred from config\n         * @param {Number} minutes the minutes\n         * @param {Number} seconds the seconds (optional)\n         */\n        function setHours(hours, minutes, seconds) {\n            if (self.latestSelectedDateObj !== undefined) {\n                self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);\n            }\n            if (!self.hourElement || !self.minuteElement || self.isMobile)\n                return;\n            self.hourElement.value = pad(!self.config.time_24hr\n                ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)\n                : hours);\n            self.minuteElement.value = pad(minutes);\n            if (self.amPM !== undefined)\n                self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];\n            if (self.secondElement !== undefined)\n                self.secondElement.value = pad(seconds);\n        }\n        /**\n         * Handles the year input and incrementing events\n         * @param {Event} event the keyup or increment event\n         */\n        function onYearInput(event) {\n            var year = parseInt(event.target.value) + (event.delta || 0);\n            if (year / 1000 > 1 ||\n                (event.key === "Enter" && !/[^\\d]/.test(year.toString()))) {\n                changeYear(year);\n            }\n        }\n        /**\n         * Essentially addEventListener + tracking\n         * @param {Element} element the element to addEventListener to\n         * @param {String} event the event name\n         * @param {Function} handler the event handler\n         */\n        function bind(element, event, handler, options) {\n            if (event instanceof Array)\n                return event.forEach(function (ev) { return bind(element, ev, handler, options); });\n            if (element instanceof Array)\n                return element.forEach(function (el) { return bind(el, event, handler, options); });\n            element.addEventListener(event, handler, options);\n            self._handlers.push({\n                element: element,\n                event: event,\n                handler: handler,\n                options: options\n            });\n        }\n        /**\n         * A mousedown handler which mimics click.\n         * Minimizes latency, since we don\'t need to wait for mouseup in most cases.\n         * Also, avoids handling right clicks.\n         *\n         * @param {Function} handler the event handler\n         */\n        function onClick(handler) {\n            return function (evt) {\n                evt.which === 1 && handler(evt);\n            };\n        }\n        function triggerChange() {\n            triggerEvent("onChange");\n        }\n        /**\n         * Adds all the necessary event listeners\n         */\n        function bindEvents() {\n            if (self.config.wrap) {\n                ["open", "close", "toggle", "clear"].forEach(function (evt) {\n                    Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {\n                        return bind(el, "click", self[evt]);\n                    });\n                });\n            }\n            if (self.isMobile) {\n                setupMobile();\n                return;\n            }\n            var debouncedResize = debounce(onResize, 50);\n            self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);\n            if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))\n                bind(self.daysContainer, "mouseover", function (e) {\n                    if (self.config.mode === "range")\n                        onMouseOver(e.target);\n                });\n            bind(window.document.body, "keydown", onKeyDown);\n            if (!self.config.inline && !self.config.static)\n                bind(window, "resize", debouncedResize);\n            if (window.ontouchstart !== undefined)\n                bind(window.document, "touchstart", documentClick);\n            else\n                bind(window.document, "mousedown", onClick(documentClick));\n            bind(window.document, "focus", documentClick, { capture: true });\n            if (self.config.clickOpens === true) {\n                bind(self._input, "focus", self.open);\n                bind(self._input, "mousedown", onClick(self.open));\n            }\n            if (self.daysContainer !== undefined) {\n                bind(self.monthNav, "mousedown", onClick(onMonthNavClick));\n                bind(self.monthNav, ["keyup", "increment"], onYearInput);\n                bind(self.daysContainer, "mousedown", onClick(selectDate));\n            }\n            if (self.timeContainer !== undefined &&\n                self.minuteElement !== undefined &&\n                self.hourElement !== undefined) {\n                var selText = function (e) {\n                    return e.target.select();\n                };\n                bind(self.timeContainer, ["increment"], updateTime);\n                bind(self.timeContainer, "blur", updateTime, { capture: true });\n                bind(self.timeContainer, "mousedown", onClick(timeIncrement));\n                bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);\n                if (self.secondElement !== undefined)\n                    bind(self.secondElement, "focus", function () { return self.secondElement && self.secondElement.select(); });\n                if (self.amPM !== undefined) {\n                    bind(self.amPM, "mousedown", onClick(function (e) {\n                        updateTime(e);\n                        triggerChange();\n                    }));\n                }\n            }\n        }\n        /**\n         * Set the calendar view to a particular date.\n         * @param {Date} jumpDate the date to set the view to\n         * @param {boolean} triggerChange if change events should be triggered\n         */\n        function jumpToDate(jumpDate, triggerChange) {\n            var jumpTo = jumpDate !== undefined\n                ? self.parseDate(jumpDate)\n                : self.latestSelectedDateObj ||\n                    (self.config.minDate && self.config.minDate > self.now\n                        ? self.config.minDate\n                        : self.config.maxDate && self.config.maxDate < self.now\n                            ? self.config.maxDate\n                            : self.now);\n            var oldYear = self.currentYear;\n            var oldMonth = self.currentMonth;\n            try {\n                if (jumpTo !== undefined) {\n                    self.currentYear = jumpTo.getFullYear();\n                    self.currentMonth = jumpTo.getMonth();\n                }\n            }\n            catch (e) {\n                /* istanbul ignore next */\n                e.message = "Invalid date supplied: " + jumpTo;\n                self.config.errorHandler(e);\n            }\n            if (triggerChange && self.currentYear !== oldYear) {\n                triggerEvent("onYearChange");\n                buildMonthSwitch();\n            }\n            if (triggerChange &&\n                (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {\n                triggerEvent("onMonthChange");\n            }\n            self.redraw();\n        }\n        /**\n         * The up/down arrow handler for time inputs\n         * @param {Event} e the click event\n         */\n        function timeIncrement(e) {\n            if (~e.target.className.indexOf("arrow"))\n                incrementNumInput(e, e.target.classList.contains("arrowUp") ? 1 : -1);\n        }\n        /**\n         * Increments/decrements the value of input associ-\n         * ated with the up/down arrow by dispatching an\n         * "increment" event on the input.\n         *\n         * @param {Event} e the click event\n         * @param {Number} delta the diff (usually 1 or -1)\n         * @param {Element} inputElem the input element\n         */\n        function incrementNumInput(e, delta, inputElem) {\n            var target = e && e.target;\n            var input = inputElem ||\n                (target && target.parentNode && target.parentNode.firstChild);\n            var event = createEvent("increment");\n            event.delta = delta;\n            input && input.dispatchEvent(event);\n        }\n        function build() {\n            var fragment = window.document.createDocumentFragment();\n            self.calendarContainer = createElement("div", "flatpickr-calendar");\n            self.calendarContainer.tabIndex = -1;\n            if (!self.config.noCalendar) {\n                fragment.appendChild(buildMonthNav());\n                self.innerContainer = createElement("div", "flatpickr-innerContainer");\n                if (self.config.weekNumbers) {\n                    var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;\n                    self.innerContainer.appendChild(weekWrapper);\n                    self.weekNumbers = weekNumbers;\n                    self.weekWrapper = weekWrapper;\n                }\n                self.rContainer = createElement("div", "flatpickr-rContainer");\n                self.rContainer.appendChild(buildWeekdays());\n                if (!self.daysContainer) {\n                    self.daysContainer = createElement("div", "flatpickr-days");\n                    self.daysContainer.tabIndex = -1;\n                }\n                buildDays();\n                self.rContainer.appendChild(self.daysContainer);\n                self.innerContainer.appendChild(self.rContainer);\n                fragment.appendChild(self.innerContainer);\n            }\n            if (self.config.enableTime) {\n                fragment.appendChild(buildTime());\n            }\n            toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");\n            toggleClass(self.calendarContainer, "animate", self.config.animate === true);\n            toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);\n            self.calendarContainer.appendChild(fragment);\n            var customAppend = self.config.appendTo !== undefined &&\n                self.config.appendTo.nodeType !== undefined;\n            if (self.config.inline || self.config.static) {\n                self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");\n                if (self.config.inline) {\n                    if (!customAppend && self.element.parentNode)\n                        self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);\n                    else if (self.config.appendTo !== undefined)\n                        self.config.appendTo.appendChild(self.calendarContainer);\n                }\n                if (self.config.static) {\n                    var wrapper = createElement("div", "flatpickr-wrapper");\n                    if (self.element.parentNode)\n                        self.element.parentNode.insertBefore(wrapper, self.element);\n                    wrapper.appendChild(self.element);\n                    if (self.altInput)\n                        wrapper.appendChild(self.altInput);\n                    wrapper.appendChild(self.calendarContainer);\n                }\n            }\n            if (!self.config.static && !self.config.inline)\n                (self.config.appendTo !== undefined\n                    ? self.config.appendTo\n                    : window.document.body).appendChild(self.calendarContainer);\n        }\n        function createDay(className, date, dayNumber, i) {\n            var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", "flatpickr-day " + className, date.getDate().toString());\n            dayElement.dateObj = date;\n            dayElement.$i = i;\n            dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));\n            if (className.indexOf("hidden") === -1 &&\n                compareDates(date, self.now) === 0) {\n                self.todayDateElem = dayElement;\n                dayElement.classList.add("today");\n                dayElement.setAttribute("aria-current", "date");\n            }\n            if (dateIsEnabled) {\n                dayElement.tabIndex = -1;\n                if (isDateSelected(date)) {\n                    dayElement.classList.add("selected");\n                    self.selectedDateElem = dayElement;\n                    if (self.config.mode === "range") {\n                        toggleClass(dayElement, "startRange", self.selectedDates[0] &&\n                            compareDates(date, self.selectedDates[0], true) === 0);\n                        toggleClass(dayElement, "endRange", self.selectedDates[1] &&\n                            compareDates(date, self.selectedDates[1], true) === 0);\n                        if (className === "nextMonthDay")\n                            dayElement.classList.add("inRange");\n                    }\n                }\n            }\n            else {\n                dayElement.classList.add("flatpickr-disabled");\n            }\n            if (self.config.mode === "range") {\n                if (isDateInRange(date) && !isDateSelected(date))\n                    dayElement.classList.add("inRange");\n            }\n            if (self.weekNumbers &&\n                self.config.showMonths === 1 &&\n                className !== "prevMonthDay" &&\n                dayNumber % 7 === 1) {\n                self.weekNumbers.insertAdjacentHTML("beforeend", "<span class=\'flatpickr-day\'>" + self.config.getWeek(date) + "</span>");\n            }\n            triggerEvent("onDayCreate", dayElement);\n            return dayElement;\n        }\n        function focusOnDayElem(targetNode) {\n            targetNode.focus();\n            if (self.config.mode === "range")\n                onMouseOver(targetNode);\n        }\n        function getFirstAvailableDay(delta) {\n            var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;\n            var endMonth = delta > 0 ? self.config.showMonths : -1;\n            for (var m = startMonth; m != endMonth; m += delta) {\n                var month = self.daysContainer.children[m];\n                var startIndex = delta > 0 ? 0 : month.children.length - 1;\n                var endIndex = delta > 0 ? month.children.length : -1;\n                for (var i = startIndex; i != endIndex; i += delta) {\n                    var c = month.children[i];\n                    if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))\n                        return c;\n                }\n            }\n            return undefined;\n        }\n        function getNextAvailableDay(current, delta) {\n            var givenMonth = current.className.indexOf("Month") === -1\n                ? current.dateObj.getMonth()\n                : self.currentMonth;\n            var endMonth = delta > 0 ? self.config.showMonths : -1;\n            var loopDelta = delta > 0 ? 1 : -1;\n            for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {\n                var month = self.daysContainer.children[m];\n                var startIndex = givenMonth - self.currentMonth === m\n                    ? current.$i + delta\n                    : delta < 0\n                        ? month.children.length - 1\n                        : 0;\n                var numMonthDays = month.children.length;\n                for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {\n                    var c = month.children[i];\n                    if (c.className.indexOf("hidden") === -1 &&\n                        isEnabled(c.dateObj) &&\n                        Math.abs(current.$i - i) >= Math.abs(delta))\n                        return focusOnDayElem(c);\n                }\n            }\n            self.changeMonth(loopDelta);\n            focusOnDay(getFirstAvailableDay(loopDelta), 0);\n            return undefined;\n        }\n        function focusOnDay(current, offset) {\n            var dayFocused = isInView(document.activeElement || document.body);\n            var startElem = current !== undefined\n                ? current\n                : dayFocused\n                    ? document.activeElement\n                    : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)\n                        ? self.selectedDateElem\n                        : self.todayDateElem !== undefined && isInView(self.todayDateElem)\n                            ? self.todayDateElem\n                            : getFirstAvailableDay(offset > 0 ? 1 : -1);\n            if (startElem === undefined)\n                return self._input.focus();\n            if (!dayFocused)\n                return focusOnDayElem(startElem);\n            getNextAvailableDay(startElem, offset);\n        }\n        function buildMonthDays(year, month) {\n            var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;\n            var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12);\n            var daysInMonth = self.utils.getDaysInMonth(month), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";\n            var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;\n            // prepend days from the ending of previous month\n            for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {\n                days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));\n            }\n            // Start at 1 since there is no 0th day\n            for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {\n                days.appendChild(createDay("", new Date(year, month, dayNumber), dayNumber, dayIndex));\n            }\n            // append days from the next month\n            for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&\n                (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {\n                days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));\n            }\n            //updateNavigationCurrentMonth();\n            var dayContainer = createElement("div", "dayContainer");\n            dayContainer.appendChild(days);\n            return dayContainer;\n        }\n        function buildDays() {\n            if (self.daysContainer === undefined) {\n                return;\n            }\n            clearNode(self.daysContainer);\n            // TODO: week numbers for each month\n            if (self.weekNumbers)\n                clearNode(self.weekNumbers);\n            var frag = document.createDocumentFragment();\n            for (var i = 0; i < self.config.showMonths; i++) {\n                var d = new Date(self.currentYear, self.currentMonth, 1);\n                d.setMonth(self.currentMonth + i);\n                frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));\n            }\n            self.daysContainer.appendChild(frag);\n            self.days = self.daysContainer.firstChild;\n            if (self.config.mode === "range" && self.selectedDates.length === 1) {\n                onMouseOver();\n            }\n        }\n        function buildMonthSwitch() {\n            if (self.config.showMonths > 1 ||\n                self.config.monthSelectorType !== "dropdown")\n                return;\n            var shouldBuildMonth = function (month) {\n                if (self.config.minDate !== undefined &&\n                    self.currentYear === self.config.minDate.getFullYear() &&\n                    month < self.config.minDate.getMonth()) {\n                    return false;\n                }\n                return !(self.config.maxDate !== undefined &&\n                    self.currentYear === self.config.maxDate.getFullYear() &&\n                    month > self.config.maxDate.getMonth());\n            };\n            self.monthsDropdownContainer.tabIndex = -1;\n            self.monthsDropdownContainer.innerHTML = "";\n            for (var i = 0; i < 12; i++) {\n                if (!shouldBuildMonth(i))\n                    continue;\n                var month = createElement("option", "flatpickr-monthDropdown-month");\n                month.value = new Date(self.currentYear, i).getMonth().toString();\n                month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);\n                month.tabIndex = -1;\n                if (self.currentMonth === i) {\n                    month.selected = true;\n                }\n                self.monthsDropdownContainer.appendChild(month);\n            }\n        }\n        function buildMonth() {\n            var container = createElement("div", "flatpickr-month");\n            var monthNavFragment = window.document.createDocumentFragment();\n            var monthElement;\n            if (self.config.showMonths > 1 ||\n                self.config.monthSelectorType === "static") {\n                monthElement = createElement("span", "cur-month");\n            }\n            else {\n                self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");\n                bind(self.monthsDropdownContainer, "change", function (e) {\n                    var target = e.target;\n                    var selectedMonth = parseInt(target.value, 10);\n                    self.changeMonth(selectedMonth - self.currentMonth);\n                    triggerEvent("onMonthChange");\n                });\n                buildMonthSwitch();\n                monthElement = self.monthsDropdownContainer;\n            }\n            var yearInput = createNumberInput("cur-year", { tabindex: "-1" });\n            var yearElement = yearInput.getElementsByTagName("input")[0];\n            yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);\n            if (self.config.minDate) {\n                yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());\n            }\n            if (self.config.maxDate) {\n                yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());\n                yearElement.disabled =\n                    !!self.config.minDate &&\n                        self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();\n            }\n            var currentMonth = createElement("div", "flatpickr-current-month");\n            currentMonth.appendChild(monthElement);\n            currentMonth.appendChild(yearInput);\n            monthNavFragment.appendChild(currentMonth);\n            container.appendChild(monthNavFragment);\n            return {\n                container: container,\n                yearElement: yearElement,\n                monthElement: monthElement\n            };\n        }\n        function buildMonths() {\n            clearNode(self.monthNav);\n            self.monthNav.appendChild(self.prevMonthNav);\n            if (self.config.showMonths) {\n                self.yearElements = [];\n                self.monthElements = [];\n            }\n            for (var m = self.config.showMonths; m--;) {\n                var month = buildMonth();\n                self.yearElements.push(month.yearElement);\n                self.monthElements.push(month.monthElement);\n                self.monthNav.appendChild(month.container);\n            }\n            self.monthNav.appendChild(self.nextMonthNav);\n        }\n        function buildMonthNav() {\n            self.monthNav = createElement("div", "flatpickr-months");\n            self.yearElements = [];\n            self.monthElements = [];\n            self.prevMonthNav = createElement("span", "flatpickr-prev-month");\n            self.prevMonthNav.innerHTML = self.config.prevArrow;\n            self.nextMonthNav = createElement("span", "flatpickr-next-month");\n            self.nextMonthNav.innerHTML = self.config.nextArrow;\n            buildMonths();\n            Object.defineProperty(self, "_hidePrevMonthArrow", {\n                get: function () { return self.__hidePrevMonthArrow; },\n                set: function (bool) {\n                    if (self.__hidePrevMonthArrow !== bool) {\n                        toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);\n                        self.__hidePrevMonthArrow = bool;\n                    }\n                }\n            });\n            Object.defineProperty(self, "_hideNextMonthArrow", {\n                get: function () { return self.__hideNextMonthArrow; },\n                set: function (bool) {\n                    if (self.__hideNextMonthArrow !== bool) {\n                        toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);\n                        self.__hideNextMonthArrow = bool;\n                    }\n                }\n            });\n            self.currentYearElement = self.yearElements[0];\n            updateNavigationCurrentMonth();\n            return self.monthNav;\n        }\n        function buildTime() {\n            self.calendarContainer.classList.add("hasTime");\n            if (self.config.noCalendar)\n                self.calendarContainer.classList.add("noCalendar");\n            self.timeContainer = createElement("div", "flatpickr-time");\n            self.timeContainer.tabIndex = -1;\n            var separator = createElement("span", "flatpickr-time-separator", ":");\n            var hourInput = createNumberInput("flatpickr-hour", {\n                "aria-label": self.l10n.hourAriaLabel\n            });\n            self.hourElement = hourInput.getElementsByTagName("input")[0];\n            var minuteInput = createNumberInput("flatpickr-minute", {\n                "aria-label": self.l10n.minuteAriaLabel\n            });\n            self.minuteElement = minuteInput.getElementsByTagName("input")[0];\n            self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;\n            self.hourElement.value = pad(self.latestSelectedDateObj\n                ? self.latestSelectedDateObj.getHours()\n                : self.config.time_24hr\n                    ? self.config.defaultHour\n                    : military2ampm(self.config.defaultHour));\n            self.minuteElement.value = pad(self.latestSelectedDateObj\n                ? self.latestSelectedDateObj.getMinutes()\n                : self.config.defaultMinute);\n            self.hourElement.setAttribute("step", self.config.hourIncrement.toString());\n            self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());\n            self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");\n            self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");\n            self.minuteElement.setAttribute("min", "0");\n            self.minuteElement.setAttribute("max", "59");\n            self.timeContainer.appendChild(hourInput);\n            self.timeContainer.appendChild(separator);\n            self.timeContainer.appendChild(minuteInput);\n            if (self.config.time_24hr)\n                self.timeContainer.classList.add("time24hr");\n            if (self.config.enableSeconds) {\n                self.timeContainer.classList.add("hasSeconds");\n                var secondInput = createNumberInput("flatpickr-second");\n                self.secondElement = secondInput.getElementsByTagName("input")[0];\n                self.secondElement.value = pad(self.latestSelectedDateObj\n                    ? self.latestSelectedDateObj.getSeconds()\n                    : self.config.defaultSeconds);\n                self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));\n                self.secondElement.setAttribute("min", "0");\n                self.secondElement.setAttribute("max", "59");\n                self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));\n                self.timeContainer.appendChild(secondInput);\n            }\n            if (!self.config.time_24hr) {\n                // add self.amPM if appropriate\n                self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj\n                    ? self.hourElement.value\n                    : self.config.defaultHour) > 11)]);\n                self.amPM.title = self.l10n.toggleTitle;\n                self.amPM.tabIndex = -1;\n                self.timeContainer.appendChild(self.amPM);\n            }\n            return self.timeContainer;\n        }\n        function buildWeekdays() {\n            if (!self.weekdayContainer)\n                self.weekdayContainer = createElement("div", "flatpickr-weekdays");\n            else\n                clearNode(self.weekdayContainer);\n            for (var i = self.config.showMonths; i--;) {\n                var container = createElement("div", "flatpickr-weekdaycontainer");\n                self.weekdayContainer.appendChild(container);\n            }\n            updateWeekdays();\n            return self.weekdayContainer;\n        }\n        function updateWeekdays() {\n            var firstDayOfWeek = self.l10n.firstDayOfWeek;\n            var weekdays = self.l10n.weekdays.shorthand.slice();\n            if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {\n                weekdays = weekdays.splice(firstDayOfWeek, weekdays.length).concat(weekdays.splice(0, firstDayOfWeek));\n            }\n            for (var i = self.config.showMonths; i--;) {\n                self.weekdayContainer.children[i].innerHTML = "\\n      <span class=\'flatpickr-weekday\'>\\n        " + weekdays.join("</span><span class=\'flatpickr-weekday\'>") + "\\n      </span>\\n      ";\n            }\n        }\n        /* istanbul ignore next */\n        function buildWeeks() {\n            self.calendarContainer.classList.add("hasWeeks");\n            var weekWrapper = createElement("div", "flatpickr-weekwrapper");\n            weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));\n            var weekNumbers = createElement("div", "flatpickr-weeks");\n            weekWrapper.appendChild(weekNumbers);\n            return {\n                weekWrapper: weekWrapper,\n                weekNumbers: weekNumbers\n            };\n        }\n        function changeMonth(value, isOffset) {\n            if (isOffset === void 0) { isOffset = true; }\n            var delta = isOffset ? value : value - self.currentMonth;\n            if ((delta < 0 && self._hidePrevMonthArrow === true) ||\n                (delta > 0 && self._hideNextMonthArrow === true))\n                return;\n            self.currentMonth += delta;\n            if (self.currentMonth < 0 || self.currentMonth > 11) {\n                self.currentYear += self.currentMonth > 11 ? 1 : -1;\n                self.currentMonth = (self.currentMonth + 12) % 12;\n                triggerEvent("onYearChange");\n                buildMonthSwitch();\n            }\n            buildDays();\n            triggerEvent("onMonthChange");\n            updateNavigationCurrentMonth();\n        }\n        function clear(triggerChangeEvent, toInitial) {\n            if (triggerChangeEvent === void 0) { triggerChangeEvent = true; }\n            if (toInitial === void 0) { toInitial = true; }\n            self.input.value = "";\n            if (self.altInput !== undefined)\n                self.altInput.value = "";\n            if (self.mobileInput !== undefined)\n                self.mobileInput.value = "";\n            self.selectedDates = [];\n            self.latestSelectedDateObj = undefined;\n            if (toInitial === true) {\n                self.currentYear = self._initialDate.getFullYear();\n                self.currentMonth = self._initialDate.getMonth();\n            }\n            self.showTimeInput = false;\n            if (self.config.enableTime === true) {\n                setDefaultHours();\n            }\n            self.redraw();\n            if (triggerChangeEvent)\n                // triggerChangeEvent is true (default) or an Event\n                triggerEvent("onChange");\n        }\n        function close() {\n            self.isOpen = false;\n            if (!self.isMobile) {\n                if (self.calendarContainer !== undefined) {\n                    self.calendarContainer.classList.remove("open");\n                }\n                if (self._input !== undefined) {\n                    self._input.classList.remove("active");\n                }\n            }\n            triggerEvent("onClose");\n        }\n        function destroy() {\n            if (self.config !== undefined)\n                triggerEvent("onDestroy");\n            for (var i = self._handlers.length; i--;) {\n                var h = self._handlers[i];\n                h.element.removeEventListener(h.event, h.handler, h.options);\n            }\n            self._handlers = [];\n            if (self.mobileInput) {\n                if (self.mobileInput.parentNode)\n                    self.mobileInput.parentNode.removeChild(self.mobileInput);\n                self.mobileInput = undefined;\n            }\n            else if (self.calendarContainer && self.calendarContainer.parentNode) {\n                if (self.config.static && self.calendarContainer.parentNode) {\n                    var wrapper = self.calendarContainer.parentNode;\n                    wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);\n                    if (wrapper.parentNode) {\n                        while (wrapper.firstChild)\n                            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);\n                        wrapper.parentNode.removeChild(wrapper);\n                    }\n                }\n                else\n                    self.calendarContainer.parentNode.removeChild(self.calendarContainer);\n            }\n            if (self.altInput) {\n                self.input.type = "text";\n                if (self.altInput.parentNode)\n                    self.altInput.parentNode.removeChild(self.altInput);\n                delete self.altInput;\n            }\n            if (self.input) {\n                self.input.type = self.input._type;\n                self.input.classList.remove("flatpickr-input");\n                self.input.removeAttribute("readonly");\n                self.input.value = "";\n            }\n            [\n                "_showTimeInput",\n                "latestSelectedDateObj",\n                "_hideNextMonthArrow",\n                "_hidePrevMonthArrow",\n                "__hideNextMonthArrow",\n                "__hidePrevMonthArrow",\n                "isMobile",\n                "isOpen",\n                "selectedDateElem",\n                "minDateHasTime",\n                "maxDateHasTime",\n                "days",\n                "daysContainer",\n                "_input",\n                "_positionElement",\n                "innerContainer",\n                "rContainer",\n                "monthNav",\n                "todayDateElem",\n                "calendarContainer",\n                "weekdayContainer",\n                "prevMonthNav",\n                "nextMonthNav",\n                "monthsDropdownContainer",\n                "currentMonthElement",\n                "currentYearElement",\n                "navigationCurrentMonth",\n                "selectedDateElem",\n                "config",\n            ].forEach(function (k) {\n                try {\n                    delete self[k];\n                }\n                catch (_) { }\n            });\n        }\n        function isCalendarElem(elem) {\n            if (self.config.appendTo && self.config.appendTo.contains(elem))\n                return true;\n            return self.calendarContainer.contains(elem);\n        }\n        function documentClick(e) {\n            if (self.isOpen && !self.config.inline) {\n                var eventTarget_1 = getEventTarget(e);\n                var isCalendarElement = isCalendarElem(eventTarget_1);\n                var isInput = eventTarget_1 === self.input ||\n                    eventTarget_1 === self.altInput ||\n                    self.element.contains(eventTarget_1) ||\n                    // web components\n                    // e.path is not present in all browsers. circumventing typechecks\n                    (e.path &&\n                        e.path.indexOf &&\n                        (~e.path.indexOf(self.input) ||\n                            ~e.path.indexOf(self.altInput)));\n                var lostFocus = e.type === "blur"\n                    ? isInput &&\n                        e.relatedTarget &&\n                        !isCalendarElem(e.relatedTarget)\n                    : !isInput &&\n                        !isCalendarElement &&\n                        !isCalendarElem(e.relatedTarget);\n                var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {\n                    return elem.contains(eventTarget_1);\n                });\n                if (lostFocus && isIgnored) {\n                    self.close();\n                    if (self.config.mode === "range" && self.selectedDates.length === 1) {\n                        self.clear(false);\n                        self.redraw();\n                    }\n                }\n            }\n        }\n        function changeYear(newYear) {\n            if (!newYear ||\n                (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||\n                (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))\n                return;\n            var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;\n            self.currentYear = newYearNum || self.currentYear;\n            if (self.config.maxDate &&\n                self.currentYear === self.config.maxDate.getFullYear()) {\n                self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);\n            }\n            else if (self.config.minDate &&\n                self.currentYear === self.config.minDate.getFullYear()) {\n                self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);\n            }\n            if (isNewYear) {\n                self.redraw();\n                triggerEvent("onYearChange");\n                buildMonthSwitch();\n            }\n        }\n        function isEnabled(date, timeless) {\n            if (timeless === void 0) { timeless = true; }\n            var dateToCheck = self.parseDate(date, undefined, timeless); // timeless\n            if ((self.config.minDate &&\n                dateToCheck &&\n                compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||\n                (self.config.maxDate &&\n                    dateToCheck &&\n                    compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))\n                return false;\n            if (self.config.enable.length === 0 && self.config.disable.length === 0)\n                return true;\n            if (dateToCheck === undefined)\n                return false;\n            var bool = self.config.enable.length > 0, array = bool ? self.config.enable : self.config.disable;\n            for (var i = 0, d = void 0; i < array.length; i++) {\n                d = array[i];\n                if (typeof d === "function" &&\n                    d(dateToCheck) // disabled by function\n                )\n                    return bool;\n                else if (d instanceof Date &&\n                    dateToCheck !== undefined &&\n                    d.getTime() === dateToCheck.getTime())\n                    // disabled by date\n                    return bool;\n                else if (typeof d === "string" && dateToCheck !== undefined) {\n                    // disabled by date string\n                    var parsed = self.parseDate(d, undefined, true);\n                    return parsed && parsed.getTime() === dateToCheck.getTime()\n                        ? bool\n                        : !bool;\n                }\n                else if (\n                // disabled by range\n                typeof d === "object" &&\n                    dateToCheck !== undefined &&\n                    d.from &&\n                    d.to &&\n                    dateToCheck.getTime() >= d.from.getTime() &&\n                    dateToCheck.getTime() <= d.to.getTime())\n                    return bool;\n            }\n            return !bool;\n        }\n        function isInView(elem) {\n            if (self.daysContainer !== undefined)\n                return (elem.className.indexOf("hidden") === -1 &&\n                    self.daysContainer.contains(elem));\n            return false;\n        }\n        function onKeyDown(e) {\n            // e.key                      e.keyCode\n            // "Backspace"                        8\n            // "Tab"                              9\n            // "Enter"                           13\n            // "Escape"     (IE "Esc")           27\n            // "ArrowLeft"  (IE "Left")          37\n            // "ArrowUp"    (IE "Up")            38\n            // "ArrowRight" (IE "Right")         39\n            // "ArrowDown"  (IE "Down")          40\n            // "Delete"     (IE "Del")           46\n            var isInput = e.target === self._input;\n            var allowInput = self.config.allowInput;\n            var allowKeydown = self.isOpen && (!allowInput || !isInput);\n            var allowInlineKeydown = self.config.inline && isInput && !allowInput;\n            if (e.keyCode === 13 && isInput) {\n                if (allowInput) {\n                    self.setDate(self._input.value, true, e.target === self.altInput\n                        ? self.config.altFormat\n                        : self.config.dateFormat);\n                    return e.target.blur();\n                }\n                else {\n                    self.open();\n                }\n            }\n            else if (isCalendarElem(e.target) ||\n                allowKeydown ||\n                allowInlineKeydown) {\n                var isTimeObj = !!self.timeContainer &&\n                    self.timeContainer.contains(e.target);\n                switch (e.keyCode) {\n                    case 13:\n                        if (isTimeObj) {\n                            e.preventDefault();\n                            updateTime();\n                            focusAndClose();\n                        }\n                        else\n                            selectDate(e);\n                        break;\n                    case 27: // escape\n                        e.preventDefault();\n                        focusAndClose();\n                        break;\n                    case 8:\n                    case 46:\n                        if (isInput && !self.config.allowInput) {\n                            e.preventDefault();\n                            self.clear();\n                        }\n                        break;\n                    case 37:\n                    case 39:\n                        if (!isTimeObj && !isInput) {\n                            e.preventDefault();\n                            if (self.daysContainer !== undefined &&\n                                (allowInput === false ||\n                                    (document.activeElement && isInView(document.activeElement)))) {\n                                var delta_1 = e.keyCode === 39 ? 1 : -1;\n                                if (!e.ctrlKey)\n                                    focusOnDay(undefined, delta_1);\n                                else {\n                                    e.stopPropagation();\n                                    changeMonth(delta_1);\n                                    focusOnDay(getFirstAvailableDay(1), 0);\n                                }\n                            }\n                        }\n                        else if (self.hourElement)\n                            self.hourElement.focus();\n                        break;\n                    case 38:\n                    case 40:\n                        e.preventDefault();\n                        var delta = e.keyCode === 40 ? 1 : -1;\n                        if ((self.daysContainer && e.target.$i !== undefined) ||\n                            e.target === self.input) {\n                            if (e.ctrlKey) {\n                                e.stopPropagation();\n                                changeYear(self.currentYear - delta);\n                                focusOnDay(getFirstAvailableDay(1), 0);\n                            }\n                            else if (!isTimeObj)\n                                focusOnDay(undefined, delta * 7);\n                        }\n                        else if (e.target === self.currentYearElement) {\n                            changeYear(self.currentYear - delta);\n                        }\n                        else if (self.config.enableTime) {\n                            if (!isTimeObj && self.hourElement)\n                                self.hourElement.focus();\n                            updateTime(e);\n                            self._debouncedChange();\n                        }\n                        break;\n                    case 9:\n                        if (isTimeObj) {\n                            var elems = [\n                                self.hourElement,\n                                self.minuteElement,\n                                self.secondElement,\n                                self.amPM,\n                            ]\n                                .concat(self.pluginElements)\n                                .filter(function (x) { return x; });\n                            var i = elems.indexOf(e.target);\n                            if (i !== -1) {\n                                var target = elems[i + (e.shiftKey ? -1 : 1)];\n                                e.preventDefault();\n                                (target || self._input).focus();\n                            }\n                        }\n                        else if (!self.config.noCalendar &&\n                            self.daysContainer &&\n                            self.daysContainer.contains(e.target) &&\n                            e.shiftKey) {\n                            e.preventDefault();\n                            self._input.focus();\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (self.amPM !== undefined && e.target === self.amPM) {\n                switch (e.key) {\n                    case self.l10n.amPM[0].charAt(0):\n                    case self.l10n.amPM[0].charAt(0).toLowerCase():\n                        self.amPM.textContent = self.l10n.amPM[0];\n                        setHoursFromInputs();\n                        updateValue();\n                        break;\n                    case self.l10n.amPM[1].charAt(0):\n                    case self.l10n.amPM[1].charAt(0).toLowerCase():\n                        self.amPM.textContent = self.l10n.amPM[1];\n                        setHoursFromInputs();\n                        updateValue();\n                        break;\n                }\n            }\n            if (isInput || isCalendarElem(e.target)) {\n                triggerEvent("onKeyDown", e);\n            }\n        }\n        function onMouseOver(elem) {\n            if (self.selectedDates.length !== 1 ||\n                (elem &&\n                    (!elem.classList.contains("flatpickr-day") ||\n                        elem.classList.contains("flatpickr-disabled"))))\n                return;\n            var hoverDate = elem\n                ? elem.dateObj.getTime()\n                : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());\n            var containsDisabled = false;\n            var minRange = 0, maxRange = 0;\n            for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {\n                if (!isEnabled(new Date(t), true)) {\n                    containsDisabled =\n                        containsDisabled || (t > rangeStartDate && t < rangeEndDate);\n                    if (t < initialDate && (!minRange || t > minRange))\n                        minRange = t;\n                    else if (t > initialDate && (!maxRange || t < maxRange))\n                        maxRange = t;\n                }\n            }\n            for (var m = 0; m < self.config.showMonths; m++) {\n                var month = self.daysContainer.children[m];\n                var _loop_1 = function (i, l) {\n                    var dayElem = month.children[i], date = dayElem.dateObj;\n                    var timestamp = date.getTime();\n                    var outOfRange = (minRange > 0 && timestamp < minRange) ||\n                        (maxRange > 0 && timestamp > maxRange);\n                    if (outOfRange) {\n                        dayElem.classList.add("notAllowed");\n                        ["inRange", "startRange", "endRange"].forEach(function (c) {\n                            dayElem.classList.remove(c);\n                        });\n                        return "continue";\n                    }\n                    else if (containsDisabled && !outOfRange)\n                        return "continue";\n                    ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {\n                        dayElem.classList.remove(c);\n                    });\n                    if (elem !== undefined) {\n                        elem.classList.add(hoverDate <= self.selectedDates[0].getTime()\n                            ? "startRange"\n                            : "endRange");\n                        if (initialDate < hoverDate && timestamp === initialDate)\n                            dayElem.classList.add("startRange");\n                        else if (initialDate > hoverDate && timestamp === initialDate)\n                            dayElem.classList.add("endRange");\n                        if (timestamp >= minRange &&\n                            (maxRange === 0 || timestamp <= maxRange) &&\n                            isBetween(timestamp, initialDate, hoverDate))\n                            dayElem.classList.add("inRange");\n                    }\n                };\n                for (var i = 0, l = month.children.length; i < l; i++) {\n                    _loop_1(i, l);\n                }\n            }\n        }\n        function onResize() {\n            if (self.isOpen && !self.config.static && !self.config.inline)\n                positionCalendar();\n        }\n        function setDefaultTime() {\n            self.setDate(self.config.minDate !== undefined\n                ? new Date(self.config.minDate.getTime())\n                : new Date(), true);\n            setDefaultHours();\n            updateValue();\n        }\n        function open(e, positionElement) {\n            if (positionElement === void 0) { positionElement = self._positionElement; }\n            if (self.isMobile === true) {\n                if (e) {\n                    e.preventDefault();\n                    e.target && e.target.blur();\n                }\n                if (self.mobileInput !== undefined) {\n                    self.mobileInput.focus();\n                    self.mobileInput.click();\n                }\n                triggerEvent("onOpen");\n                return;\n            }\n            if (self._input.disabled || self.config.inline)\n                return;\n            var wasOpen = self.isOpen;\n            self.isOpen = true;\n            if (!wasOpen) {\n                self.calendarContainer.classList.add("open");\n                self._input.classList.add("active");\n                triggerEvent("onOpen");\n                positionCalendar(positionElement);\n            }\n            if (self.config.enableTime === true && self.config.noCalendar === true) {\n                if (self.selectedDates.length === 0) {\n                    setDefaultTime();\n                }\n                if (self.config.allowInput === false &&\n                    (e === undefined ||\n                        !self.timeContainer.contains(e.relatedTarget))) {\n                    setTimeout(function () { return self.hourElement.select(); }, 50);\n                }\n            }\n        }\n        function minMaxDateSetter(type) {\n            return function (date) {\n                var dateObj = (self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat));\n                var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];\n                if (dateObj !== undefined) {\n                    self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =\n                        dateObj.getHours() > 0 ||\n                            dateObj.getMinutes() > 0 ||\n                            dateObj.getSeconds() > 0;\n                }\n                if (self.selectedDates) {\n                    self.selectedDates = self.selectedDates.filter(function (d) { return isEnabled(d); });\n                    if (!self.selectedDates.length && type === "min")\n                        setHoursFromDate(dateObj);\n                    updateValue();\n                }\n                if (self.daysContainer) {\n                    redraw();\n                    if (dateObj !== undefined)\n                        self.currentYearElement[type] = dateObj.getFullYear().toString();\n                    else\n                        self.currentYearElement.removeAttribute(type);\n                    self.currentYearElement.disabled =\n                        !!inverseDateObj &&\n                            dateObj !== undefined &&\n                            inverseDateObj.getFullYear() === dateObj.getFullYear();\n                }\n            };\n        }\n        function parseConfig() {\n            var boolOpts = [\n                "wrap",\n                "weekNumbers",\n                "allowInput",\n                "clickOpens",\n                "time_24hr",\n                "enableTime",\n                "noCalendar",\n                "altInput",\n                "shorthandCurrentMonth",\n                "inline",\n                "static",\n                "enableSeconds",\n                "disableMobile",\n            ];\n            var userConfig = __assign({}, instanceConfig, JSON.parse(JSON.stringify(element.dataset || {})));\n            var formats = {};\n            self.config.parseDate = userConfig.parseDate;\n            self.config.formatDate = userConfig.formatDate;\n            Object.defineProperty(self.config, "enable", {\n                get: function () { return self.config._enable; },\n                set: function (dates) {\n                    self.config._enable = parseDateRules(dates);\n                }\n            });\n            Object.defineProperty(self.config, "disable", {\n                get: function () { return self.config._disable; },\n                set: function (dates) {\n                    self.config._disable = parseDateRules(dates);\n                }\n            });\n            var timeMode = userConfig.mode === "time";\n            if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {\n                var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;\n                formats.dateFormat =\n                    userConfig.noCalendar || timeMode\n                        ? "H:i" + (userConfig.enableSeconds ? ":S" : "")\n                        : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");\n            }\n            if (userConfig.altInput &&\n                (userConfig.enableTime || timeMode) &&\n                !userConfig.altFormat) {\n                var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;\n                formats.altFormat =\n                    userConfig.noCalendar || timeMode\n                        ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")\n                        : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");\n            }\n            if (!userConfig.altInputClass) {\n                self.config.altInputClass =\n                    self.input.className + " " + self.config.altInputClass;\n            }\n            Object.defineProperty(self.config, "minDate", {\n                get: function () { return self.config._minDate; },\n                set: minMaxDateSetter("min")\n            });\n            Object.defineProperty(self.config, "maxDate", {\n                get: function () { return self.config._maxDate; },\n                set: minMaxDateSetter("max")\n            });\n            var minMaxTimeSetter = function (type) { return function (val) {\n                self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i");\n            }; };\n            Object.defineProperty(self.config, "minTime", {\n                get: function () { return self.config._minTime; },\n                set: minMaxTimeSetter("min")\n            });\n            Object.defineProperty(self.config, "maxTime", {\n                get: function () { return self.config._maxTime; },\n                set: minMaxTimeSetter("max")\n            });\n            if (userConfig.mode === "time") {\n                self.config.noCalendar = true;\n                self.config.enableTime = true;\n            }\n            Object.assign(self.config, formats, userConfig);\n            for (var i = 0; i < boolOpts.length; i++)\n                self.config[boolOpts[i]] =\n                    self.config[boolOpts[i]] === true ||\n                        self.config[boolOpts[i]] === "true";\n            HOOKS.filter(function (hook) { return self.config[hook] !== undefined; }).forEach(function (hook) {\n                self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);\n            });\n            self.isMobile =\n                !self.config.disableMobile &&\n                    !self.config.inline &&\n                    self.config.mode === "single" &&\n                    !self.config.disable.length &&\n                    !self.config.enable.length &&\n                    !self.config.weekNumbers &&\n                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n            for (var i = 0; i < self.config.plugins.length; i++) {\n                var pluginConf = self.config.plugins[i](self) || {};\n                for (var key in pluginConf) {\n                    if (HOOKS.indexOf(key) > -1) {\n                        self.config[key] = arrayify(pluginConf[key])\n                            .map(bindToInstance)\n                            .concat(self.config[key]);\n                    }\n                    else if (typeof userConfig[key] === "undefined")\n                        self.config[key] = pluginConf[key];\n                }\n            }\n            triggerEvent("onParseConfig");\n        }\n        function setupLocale() {\n            if (typeof self.config.locale !== "object" &&\n                typeof flatpickr.l10ns[self.config.locale] === "undefined")\n                self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));\n            self.l10n = __assign({}, flatpickr.l10ns["default"], (typeof self.config.locale === "object"\n                ? self.config.locale\n                : self.config.locale !== "default"\n                    ? flatpickr.l10ns[self.config.locale]\n                    : undefined));\n            tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";\n            var userConfig = __assign({}, instanceConfig, JSON.parse(JSON.stringify(element.dataset || {})));\n            if (userConfig.time_24hr === undefined &&\n                flatpickr.defaultConfig.time_24hr === undefined) {\n                self.config.time_24hr = self.l10n.time_24hr;\n            }\n            self.formatDate = createDateFormatter(self);\n            self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });\n        }\n        function positionCalendar(customPositionElement) {\n            if (self.calendarContainer === undefined)\n                return;\n            triggerEvent("onPreCalendarPosition");\n            var positionElement = customPositionElement || self._positionElement;\n            var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function (acc, child) { return acc + child.offsetHeight; }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||\n                (configPosVertical !== "below" &&\n                    distanceFromBottom < calendarHeight &&\n                    inputBounds.top > calendarHeight);\n            var top = window.pageYOffset +\n                inputBounds.top +\n                (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);\n            toggleClass(self.calendarContainer, "arrowTop", !showOnTop);\n            toggleClass(self.calendarContainer, "arrowBottom", showOnTop);\n            if (self.config.inline)\n                return;\n            var left = window.pageXOffset +\n                inputBounds.left -\n                (configPosHorizontal != null && configPosHorizontal === "center"\n                    ? (calendarWidth - inputBounds.width) / 2\n                    : 0);\n            var right = window.document.body.offsetWidth - inputBounds.right;\n            var rightMost = left + calendarWidth > window.document.body.offsetWidth;\n            var centerMost = right + calendarWidth > window.document.body.offsetWidth;\n            toggleClass(self.calendarContainer, "rightMost", rightMost);\n            if (self.config.static)\n                return;\n            self.calendarContainer.style.top = top + "px";\n            if (!rightMost) {\n                self.calendarContainer.style.left = left + "px";\n                self.calendarContainer.style.right = "auto";\n            }\n            else if (!centerMost) {\n                self.calendarContainer.style.left = "auto";\n                self.calendarContainer.style.right = right + "px";\n            }\n            else {\n                var doc = document.styleSheets[0];\n                // some testing environments don\'t have css support\n                if (doc === undefined)\n                    return;\n                var bodyWidth = window.document.body.offsetWidth;\n                var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);\n                var centerBefore = ".flatpickr-calendar.centerMost:before";\n                var centerAfter = ".flatpickr-calendar.centerMost:after";\n                var centerIndex = doc.cssRules.length;\n                var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";\n                toggleClass(self.calendarContainer, "rightMost", false);\n                toggleClass(self.calendarContainer, "centerMost", true);\n                doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);\n                self.calendarContainer.style.left = centerLeft + "px";\n                self.calendarContainer.style.right = "auto";\n            }\n        }\n        function redraw() {\n            if (self.config.noCalendar || self.isMobile)\n                return;\n            updateNavigationCurrentMonth();\n            buildDays();\n        }\n        function focusAndClose() {\n            self._input.focus();\n            if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||\n                navigator.msMaxTouchPoints !== undefined) {\n                // hack - bugs in the way IE handles focus keeps the calendar open\n                setTimeout(self.close, 0);\n            }\n            else {\n                self.close();\n            }\n        }\n        function selectDate(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            var isSelectable = function (day) {\n                return day.classList &&\n                    day.classList.contains("flatpickr-day") &&\n                    !day.classList.contains("flatpickr-disabled") &&\n                    !day.classList.contains("notAllowed");\n            };\n            var t = findParent(e.target, isSelectable);\n            if (t === undefined)\n                return;\n            var target = t;\n            var selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));\n            var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||\n                selectedDate.getMonth() >\n                    self.currentMonth + self.config.showMonths - 1) &&\n                self.config.mode !== "range";\n            self.selectedDateElem = target;\n            if (self.config.mode === "single")\n                self.selectedDates = [selectedDate];\n            else if (self.config.mode === "multiple") {\n                var selectedIndex = isDateSelected(selectedDate);\n                if (selectedIndex)\n                    self.selectedDates.splice(parseInt(selectedIndex), 1);\n                else\n                    self.selectedDates.push(selectedDate);\n            }\n            else if (self.config.mode === "range") {\n                if (self.selectedDates.length === 2) {\n                    self.clear(false, false);\n                }\n                self.latestSelectedDateObj = selectedDate;\n                self.selectedDates.push(selectedDate);\n                // unless selecting same date twice, sort ascendingly\n                if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)\n                    self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });\n            }\n            setHoursFromInputs();\n            if (shouldChangeMonth) {\n                var isNewYear = self.currentYear !== selectedDate.getFullYear();\n                self.currentYear = selectedDate.getFullYear();\n                self.currentMonth = selectedDate.getMonth();\n                if (isNewYear) {\n                    triggerEvent("onYearChange");\n                    buildMonthSwitch();\n                }\n                triggerEvent("onMonthChange");\n            }\n            updateNavigationCurrentMonth();\n            buildDays();\n            updateValue();\n            if (self.config.enableTime)\n                setTimeout(function () { return (self.showTimeInput = true); }, 50);\n            // maintain focus\n            if (!shouldChangeMonth &&\n                self.config.mode !== "range" &&\n                self.config.showMonths === 1)\n                focusOnDayElem(target);\n            else if (self.selectedDateElem !== undefined &&\n                self.hourElement === undefined) {\n                self.selectedDateElem && self.selectedDateElem.focus();\n            }\n            if (self.hourElement !== undefined)\n                self.hourElement !== undefined && self.hourElement.focus();\n            if (self.config.closeOnSelect) {\n                var single = self.config.mode === "single" && !self.config.enableTime;\n                var range = self.config.mode === "range" &&\n                    self.selectedDates.length === 2 &&\n                    !self.config.enableTime;\n                if (single || range) {\n                    focusAndClose();\n                }\n            }\n            triggerChange();\n        }\n        var CALLBACKS = {\n            locale: [setupLocale, updateWeekdays],\n            showMonths: [buildMonths, setCalendarWidth, buildWeekdays],\n            minDate: [jumpToDate],\n            maxDate: [jumpToDate]\n        };\n        function set(option, value) {\n            if (option !== null && typeof option === "object") {\n                Object.assign(self.config, option);\n                for (var key in option) {\n                    if (CALLBACKS[key] !== undefined)\n                        CALLBACKS[key].forEach(function (x) { return x(); });\n                }\n            }\n            else {\n                self.config[option] = value;\n                if (CALLBACKS[option] !== undefined)\n                    CALLBACKS[option].forEach(function (x) { return x(); });\n                else if (HOOKS.indexOf(option) > -1)\n                    self.config[option] = arrayify(value);\n            }\n            self.redraw();\n            updateValue(false);\n        }\n        function setSelectedDate(inputDate, format) {\n            var dates = [];\n            if (inputDate instanceof Array)\n                dates = inputDate.map(function (d) { return self.parseDate(d, format); });\n            else if (inputDate instanceof Date || typeof inputDate === "number")\n                dates = [self.parseDate(inputDate, format)];\n            else if (typeof inputDate === "string") {\n                switch (self.config.mode) {\n                    case "single":\n                    case "time":\n                        dates = [self.parseDate(inputDate, format)];\n                        break;\n                    case "multiple":\n                        dates = inputDate\n                            .split(self.config.conjunction)\n                            .map(function (date) { return self.parseDate(date, format); });\n                        break;\n                    case "range":\n                        dates = inputDate\n                            .split(self.l10n.rangeSeparator)\n                            .map(function (date) { return self.parseDate(date, format); });\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else\n                self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));\n            self.selectedDates = dates.filter(function (d) { return d instanceof Date && isEnabled(d, false); });\n            if (self.config.mode === "range")\n                self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });\n        }\n        function setDate(date, triggerChange, format) {\n            if (triggerChange === void 0) { triggerChange = false; }\n            if (format === void 0) { format = self.config.dateFormat; }\n            if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))\n                return self.clear(triggerChange);\n            setSelectedDate(date, format);\n            self.showTimeInput = self.selectedDates.length > 0;\n            self.latestSelectedDateObj =\n                self.selectedDates[self.selectedDates.length - 1];\n            self.redraw();\n            jumpToDate();\n            setHoursFromDate();\n            if (self.selectedDates.length === 0) {\n                self.clear(false);\n            }\n            updateValue(triggerChange);\n            if (triggerChange)\n                triggerEvent("onChange");\n        }\n        function parseDateRules(arr) {\n            return arr\n                .slice()\n                .map(function (rule) {\n                if (typeof rule === "string" ||\n                    typeof rule === "number" ||\n                    rule instanceof Date) {\n                    return self.parseDate(rule, undefined, true);\n                }\n                else if (rule &&\n                    typeof rule === "object" &&\n                    rule.from &&\n                    rule.to)\n                    return {\n                        from: self.parseDate(rule.from, undefined),\n                        to: self.parseDate(rule.to, undefined)\n                    };\n                return rule;\n            })\n                .filter(function (x) { return x; }); // remove falsy values\n        }\n        function setupDates() {\n            self.selectedDates = [];\n            self.now = self.parseDate(self.config.now) || new Date();\n            // Workaround IE11 setting placeholder as the input\'s value\n            var preloadedDate = self.config.defaultDate ||\n                ((self.input.nodeName === "INPUT" ||\n                    self.input.nodeName === "TEXTAREA") &&\n                    self.input.placeholder &&\n                    self.input.value === self.input.placeholder\n                    ? null\n                    : self.input.value);\n            if (preloadedDate)\n                setSelectedDate(preloadedDate, self.config.dateFormat);\n            self._initialDate =\n                self.selectedDates.length > 0\n                    ? self.selectedDates[0]\n                    : self.config.minDate &&\n                        self.config.minDate.getTime() > self.now.getTime()\n                        ? self.config.minDate\n                        : self.config.maxDate &&\n                            self.config.maxDate.getTime() < self.now.getTime()\n                            ? self.config.maxDate\n                            : self.now;\n            self.currentYear = self._initialDate.getFullYear();\n            self.currentMonth = self._initialDate.getMonth();\n            if (self.selectedDates.length > 0)\n                self.latestSelectedDateObj = self.selectedDates[0];\n            if (self.config.minTime !== undefined)\n                self.config.minTime = self.parseDate(self.config.minTime, "H:i");\n            if (self.config.maxTime !== undefined)\n                self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");\n            self.minDateHasTime =\n                !!self.config.minDate &&\n                    (self.config.minDate.getHours() > 0 ||\n                        self.config.minDate.getMinutes() > 0 ||\n                        self.config.minDate.getSeconds() > 0);\n            self.maxDateHasTime =\n                !!self.config.maxDate &&\n                    (self.config.maxDate.getHours() > 0 ||\n                        self.config.maxDate.getMinutes() > 0 ||\n                        self.config.maxDate.getSeconds() > 0);\n            Object.defineProperty(self, "showTimeInput", {\n                get: function () { return self._showTimeInput; },\n                set: function (bool) {\n                    self._showTimeInput = bool;\n                    if (self.calendarContainer)\n                        toggleClass(self.calendarContainer, "showTimeInput", bool);\n                    self.isOpen && positionCalendar();\n                }\n            });\n        }\n        function setupInputs() {\n            self.input = self.config.wrap\n                ? element.querySelector("[data-input]")\n                : element;\n            /* istanbul ignore next */\n            if (!self.input) {\n                self.config.errorHandler(new Error("Invalid input element specified"));\n                return;\n            }\n            // hack: store previous type to restore it after destroy()\n            self.input._type = self.input.type;\n            self.input.type = "text";\n            self.input.classList.add("flatpickr-input");\n            self._input = self.input;\n            if (self.config.altInput) {\n                // replicate self.element\n                self.altInput = createElement(self.input.nodeName, self.config.altInputClass);\n                self._input = self.altInput;\n                self.altInput.placeholder = self.input.placeholder;\n                self.altInput.disabled = self.input.disabled;\n                self.altInput.required = self.input.required;\n                self.altInput.tabIndex = self.input.tabIndex;\n                self.altInput.type = "text";\n                self.input.setAttribute("type", "hidden");\n                if (!self.config.static && self.input.parentNode)\n                    self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);\n            }\n            if (!self.config.allowInput)\n                self._input.setAttribute("readonly", "readonly");\n            self._positionElement = self.config.positionElement || self._input;\n        }\n        function setupMobile() {\n            var inputType = self.config.enableTime\n                ? self.config.noCalendar\n                    ? "time"\n                    : "datetime-local"\n                : "date";\n            self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");\n            self.mobileInput.step = self.input.getAttribute("step") || "any";\n            self.mobileInput.tabIndex = 1;\n            self.mobileInput.type = inputType;\n            self.mobileInput.disabled = self.input.disabled;\n            self.mobileInput.required = self.input.required;\n            self.mobileInput.placeholder = self.input.placeholder;\n            self.mobileFormatStr =\n                inputType === "datetime-local"\n                    ? "Y-m-d\\\\TH:i:S"\n                    : inputType === "date"\n                        ? "Y-m-d"\n                        : "H:i:S";\n            if (self.selectedDates.length > 0) {\n                self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);\n            }\n            if (self.config.minDate)\n                self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");\n            if (self.config.maxDate)\n                self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");\n            self.input.type = "hidden";\n            if (self.altInput !== undefined)\n                self.altInput.type = "hidden";\n            try {\n                if (self.input.parentNode)\n                    self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);\n            }\n            catch (_a) { }\n            bind(self.mobileInput, "change", function (e) {\n                self.setDate(e.target.value, false, self.mobileFormatStr);\n                triggerEvent("onChange");\n                triggerEvent("onClose");\n            });\n        }\n        function toggle(e) {\n            if (self.isOpen === true)\n                return self.close();\n            self.open(e);\n        }\n        function triggerEvent(event, data) {\n            // If the instance has been destroyed already, all hooks have been removed\n            if (self.config === undefined)\n                return;\n            var hooks = self.config[event];\n            if (hooks !== undefined && hooks.length > 0) {\n                for (var i = 0; hooks[i] && i < hooks.length; i++)\n                    hooks[i](self.selectedDates, self.input.value, self, data);\n            }\n            if (event === "onChange") {\n                self.input.dispatchEvent(createEvent("change"));\n                // many front-end frameworks bind to the input event\n                self.input.dispatchEvent(createEvent("input"));\n            }\n        }\n        function createEvent(name) {\n            var e = document.createEvent("Event");\n            e.initEvent(name, true, true);\n            return e;\n        }\n        function isDateSelected(date) {\n            for (var i = 0; i < self.selectedDates.length; i++) {\n                if (compareDates(self.selectedDates[i], date) === 0)\n                    return "" + i;\n            }\n            return false;\n        }\n        function isDateInRange(date) {\n            if (self.config.mode !== "range" || self.selectedDates.length < 2)\n                return false;\n            return (compareDates(date, self.selectedDates[0]) >= 0 &&\n                compareDates(date, self.selectedDates[1]) <= 0);\n        }\n        function updateNavigationCurrentMonth() {\n            if (self.config.noCalendar || self.isMobile || !self.monthNav)\n                return;\n            self.yearElements.forEach(function (yearElement, i) {\n                var d = new Date(self.currentYear, self.currentMonth, 1);\n                d.setMonth(self.currentMonth + i);\n                if (self.config.showMonths > 1 ||\n                    self.config.monthSelectorType === "static") {\n                    self.monthElements[i].textContent =\n                        monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";\n                }\n                else {\n                    self.monthsDropdownContainer.value = d.getMonth().toString();\n                }\n                yearElement.value = d.getFullYear().toString();\n            });\n            self._hidePrevMonthArrow =\n                self.config.minDate !== undefined &&\n                    (self.currentYear === self.config.minDate.getFullYear()\n                        ? self.currentMonth <= self.config.minDate.getMonth()\n                        : self.currentYear < self.config.minDate.getFullYear());\n            self._hideNextMonthArrow =\n                self.config.maxDate !== undefined &&\n                    (self.currentYear === self.config.maxDate.getFullYear()\n                        ? self.currentMonth + 1 > self.config.maxDate.getMonth()\n                        : self.currentYear > self.config.maxDate.getFullYear());\n        }\n        function getDateStr(format) {\n            return self.selectedDates\n                .map(function (dObj) { return self.formatDate(dObj, format); })\n                .filter(function (d, i, arr) {\n                return self.config.mode !== "range" ||\n                    self.config.enableTime ||\n                    arr.indexOf(d) === i;\n            })\n                .join(self.config.mode !== "range"\n                ? self.config.conjunction\n                : self.l10n.rangeSeparator);\n        }\n        /**\n         * Updates the values of inputs associated with the calendar\n         */\n        function updateValue(triggerChange) {\n            if (triggerChange === void 0) { triggerChange = true; }\n            if (self.mobileInput !== undefined && self.mobileFormatStr) {\n                self.mobileInput.value =\n                    self.latestSelectedDateObj !== undefined\n                        ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)\n                        : "";\n            }\n            self.input.value = getDateStr(self.config.dateFormat);\n            if (self.altInput !== undefined) {\n                self.altInput.value = getDateStr(self.config.altFormat);\n            }\n            if (triggerChange !== false)\n                triggerEvent("onValueUpdate");\n        }\n        function onMonthNavClick(e) {\n            var isPrevMonth = self.prevMonthNav.contains(e.target);\n            var isNextMonth = self.nextMonthNav.contains(e.target);\n            if (isPrevMonth || isNextMonth) {\n                changeMonth(isPrevMonth ? -1 : 1);\n            }\n            else if (self.yearElements.indexOf(e.target) >= 0) {\n                e.target.select();\n            }\n            else if (e.target.classList.contains("arrowUp")) {\n                self.changeYear(self.currentYear + 1);\n            }\n            else if (e.target.classList.contains("arrowDown")) {\n                self.changeYear(self.currentYear - 1);\n            }\n        }\n        function timeWrapper(e) {\n            e.preventDefault();\n            var isKeyDown = e.type === "keydown", input = e.target;\n            if (self.amPM !== undefined && e.target === self.amPM) {\n                self.amPM.textContent =\n                    self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];\n            }\n            var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||\n                (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);\n            var newValue = curValue + step * delta;\n            if (typeof input.value !== "undefined" && input.value.length === 2) {\n                var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;\n                if (newValue < min) {\n                    newValue =\n                        max +\n                            newValue +\n                            int(!isHourElem) +\n                            (int(isHourElem) && int(!self.amPM));\n                    if (isMinuteElem)\n                        incrementNumInput(undefined, -1, self.hourElement);\n                }\n                else if (newValue > max) {\n                    newValue =\n                        input === self.hourElement ? newValue - max - int(!self.amPM) : min;\n                    if (isMinuteElem)\n                        incrementNumInput(undefined, 1, self.hourElement);\n                }\n                if (self.amPM &&\n                    isHourElem &&\n                    (step === 1\n                        ? newValue + curValue === 23\n                        : Math.abs(newValue - curValue) > step)) {\n                    self.amPM.textContent =\n                        self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];\n                }\n                input.value = pad(newValue);\n            }\n        }\n        init();\n        return self;\n    }\n    /* istanbul ignore next */\n    function _flatpickr(nodeList, config) {\n        // static list\n        var nodes = Array.prototype.slice\n            .call(nodeList)\n            .filter(function (x) { return x instanceof HTMLElement; });\n        var instances = [];\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            try {\n                if (node.getAttribute("data-fp-omit") !== null)\n                    continue;\n                if (node._flatpickr !== undefined) {\n                    node._flatpickr.destroy();\n                    node._flatpickr = undefined;\n                }\n                node._flatpickr = FlatpickrInstance(node, config || {});\n                instances.push(node._flatpickr);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        return instances.length === 1 ? instances[0] : instances;\n    }\n    /* istanbul ignore next */\n    if (typeof HTMLElement !== "undefined" &&\n        typeof HTMLCollection !== "undefined" &&\n        typeof NodeList !== "undefined") {\n        // browser env\n        HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {\n            return _flatpickr(this, config);\n        };\n        HTMLElement.prototype.flatpickr = function (config) {\n            return _flatpickr([this], config);\n        };\n    }\n    /* istanbul ignore next */\n    var flatpickr = function (selector, config) {\n        if (typeof selector === "string") {\n            return _flatpickr(window.document.querySelectorAll(selector), config);\n        }\n        else if (selector instanceof Node) {\n            return _flatpickr([selector], config);\n        }\n        else {\n            return _flatpickr(selector, config);\n        }\n    };\n    /* istanbul ignore next */\n    flatpickr.defaultConfig = {};\n    flatpickr.l10ns = {\n        en: __assign({}, english),\n        "default": __assign({}, english)\n    };\n    flatpickr.localize = function (l10n) {\n        flatpickr.l10ns["default"] = __assign({}, flatpickr.l10ns["default"], l10n);\n    };\n    flatpickr.setDefaults = function (config) {\n        flatpickr.defaultConfig = __assign({}, flatpickr.defaultConfig, config);\n    };\n    flatpickr.parseDate = createDateParser({});\n    flatpickr.formatDate = createDateFormatter({});\n    flatpickr.compareDates = compareDates;\n    /* istanbul ignore next */\n    if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {\n        jQuery.fn.flatpickr = function (config) {\n            return _flatpickr(this, config);\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    Date.prototype.fp_incr = function (days) {\n        return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));\n    };\n    if (typeof window !== "undefined") {\n        window.flatpickr = flatpickr;\n    }\n\n    return flatpickr;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///cf06\n')},fe7f:function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHJvcGlmeS9kaXN0L2Nzcy9kcm9waWZ5LmNzcz9iYmFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6ImZlN2YuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///fe7f\n")}}]);